// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: abathur.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NydusNetwork.API.Protocol {

  /// <summary>Holder for reflection information generated from abathur.proto</summary>
  public static partial class AbathurReflection {

    #region Descriptor
    /// <summary>File descriptor for abathur.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AbathurReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1hYmF0aHVyLnByb3RvEhlOeWR1c05ldHdvcmsuQVBJLlByb3RvY29sGgxj",
            "b21tb24ucHJvdG8aDHNjMmFwaS5wcm90bxoKZGF0YS5wcm90bxoJcmF3LnBy",
            "b3RvGgtzY29yZS5wcm90byL4AQoOQWJhdGh1clJlcXVlc3QSNgoFaW50ZWwY",
            "ASABKAsyJy5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLkludGVsUmVxdWVz",
            "dBJACgpwcm9kdWN0aW9uGAMgAygLMiwuTnlkdXNOZXR3b3JrLkFQSS5Qcm90",
            "b2NvbC5Qcm9kdWN0aW9uUmVxdWVzdBI4CgZjb21iYXQYBCADKAsyKC5OeWR1",
            "c05ldHdvcmsuQVBJLlByb3RvY29sLkNvbWJhdFJlcXVlc3QSMgoDcmF3GAUg",
            "ASgLMiUuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5SYXdSZXF1ZXN0IsMB",
            "Cg9BYmF0aHVyUmVzcG9uc2USNwoFaW50ZWwYASABKAsyKC5OeWR1c05ldHdv",
            "cmsuQVBJLlByb3RvY29sLkludGVsUmVzcG9uc2USPQoMbm90aWZpY2F0aW9u",
            "GAIgASgLMicuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Ob3RpZmljYXRp",
            "b24SOAoLcmF3UmVzcG9uc2UYAyABKAsyIy5OeWR1c05ldHdvcmsuQVBJLlBy",
            "b3RvY29sLlJlc3BvbnNlIocDCgxJbnRlbFJlcXVlc3QSCwoDbWFwGAEgASgI",
            "Eg0KBXNjb3JlGAIgASgIEg4KBmNvbW1vbhgDIAEoCBIVCg11cGdyYWRlc19z",
            "ZWxmGAQgASgIEhYKDmJ1aWxkaW5nc19zZWxmGAUgASgIEhIKCnVuaXRzX3Nl",
            "bGYYBiABKAgSFAoMd29ya2Vyc19zZWxmGAcgASgIEhUKDWRlc3RydWN0aWJs",
            "ZXMYCCABKAgSGAoQc3RydWN0dXJlc19lbmVteRgJIAEoCBITCgt1bml0c19l",
            "bmVteRgKIAEoCBIVCg13b3JrZXJzX2VuZW15GAsgASgIEhYKDnByaW1hcnlf",
            "Y29sb255GA8gASgIEhAKCGNvbG9uaWVzGBAgASgIEhYKDm1pbmVyYWxfZmll",
            "bGRzGBEgASgIEhYKDlZlc3BlbmVHZXlzZXJzGBIgASgIEhgKEHByb2R1Y3Rp",
            "b25fcXVldWUYEyABKAgSDgoGc3F1YWRzGBQgASgIEhEKCWdhbWVfbG9vcBgV",
            "IAEoCCLpBwoNSW50ZWxSZXNwb25zZRIyCgNtYXAYASABKAsyJS5OeWR1c05l",
            "dHdvcmsuQVBJLlByb3RvY29sLkFiYXRodXJNYXASLwoFc2NvcmUYAiABKAsy",
            "IC5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLlNjb3JlEjcKBmNvbW1vbhgD",
            "IAEoCzInLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuUGxheWVyQ29tbW9u",
            "Ej0KDXVwZ3JhZGVzX3NlbGYYBCADKAsyJi5OeWR1c05ldHdvcmsuQVBJLlBy",
            "b3RvY29sLlVwZ3JhZGVEYXRhEjcKDmJ1aWxkaW5nc19zZWxmGAUgAygLMh8u",
            "TnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Vbml0EjMKCnVuaXRzX3NlbGYY",
            "BiADKAsyHy5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLlVuaXQSNQoMd29y",
            "a2Vyc19zZWxmGAcgAygLMh8uTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5V",
            "bml0EjYKDWRlc3RydWN0aWJsZXMYCCADKAsyHy5OeWR1c05ldHdvcmsuQVBJ",
            "LlByb3RvY29sLlVuaXQSOQoQc3RydWN0dXJlc19lbmVteRgJIAMoCzIfLk55",
            "ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuVW5pdBI0Cgt1bml0c19lbmVteRgK",
            "IAMoCzIfLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuVW5pdBI2Cg13b3Jr",
            "ZXJzX2VuZW15GAsgAygLMh8uTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5V",
            "bml0Ej0KDnByaW1hcnlfY29sb255GA8gASgLMiUuTnlkdXNOZXR3b3JrLkFQ",
            "SS5Qcm90b2NvbC5Db2xvbnlEYXRhEjcKCGNvbG9uaWVzGBAgAygLMiUuTnlk",
            "dXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Db2xvbnlEYXRhEjcKDm1pbmVyYWxf",
            "ZmllbGRzGBEgAygLMh8uTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Vbml0",
            "EjgKD3Zlc3BlbmVfZ2V5c2VycxgSIAMoCzIfLk55ZHVzTmV0d29yay5BUEku",
            "UHJvdG9jb2wuVW5pdBJBChBwcm9kdWN0aW9uX3F1ZXVlGBMgAygLMicuTnlk",
            "dXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Vbml0VHlwZURhdGESNAoGc3F1YWRz",
            "GBQgAygLMiQuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5TcXVhZERhdGES",
            "EQoJZ2FtZV9sb29wGBUgASgNItwBChFQcm9kdWN0aW9uUmVxdWVzdBJHChFj",
            "bGVhcl9idWlsZF9vcmRlchgBIAEoCzIqLk55ZHVzTmV0d29yay5BUEkuUHJv",
            "dG9jb2wuQ2xlYXJCdWlsZE9yZGVySAASOgoKcXVldWVfdW5pdBgCIAEoCzIk",
            "Lk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuUXVldWVVbml0SAASOgoKcXVl",
            "dWVfdGVjaBgDIAEoCzIkLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuUXVl",
            "dWVUZWNoSABCBgoEY2FsbCIRCg9DbGVhckJ1aWxkT3JkZXIicQoJUXVldWVV",
            "bml0Eg8KB3VuaXRfaWQYASABKA0SLwoDcG9zGAIgASgLMiIuTnlkdXNOZXR3",
            "b3JrLkFQSS5Qcm90b2NvbC5Qb2ludDJEEg8KB3NwYWNpbmcYAyABKAUSEQoJ",
            "c2tpcHBhYmxlGAQgASgIIjIKCVF1ZXVlVGVjaBISCgp1cGdyYWRlX2lkGAEg",
            "ASgNEhEKCXNraXBwYWJsZRgCIAEoCCLaCwoNQ29tYmF0UmVxdWVzdBI4Cglt",
            "b3ZlX3VuaXQYASABKAsyIy5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLk1v",
            "dmVVbml0SAASOgoKbW92ZV9zcXVhZBgCIAEoCzIkLk55ZHVzTmV0d29yay5B",
            "UEkuUHJvdG9jb2wuTW92ZVNxdWFkSAASRQoQYXR0YWNrX21vdmVfdW5pdBgD",
            "IAEoCzIpLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuQXR0YWNrTW92ZVVu",
            "aXRIABJHChFhdHRhY2tfbW92ZV9zcXVhZBgEIAEoCzIqLk55ZHVzTmV0d29y",
            "ay5BUEkuUHJvdG9jb2wuQXR0YWNrTW92ZVNxdWFkSAASPAoLYXR0YWNrX3Vu",
            "aXQYBSABKAsyJS5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLkF0dGFja1Vu",
            "aXRIABI+CgxhdHRhY2tfc3F1YWQYBiABKAsyJi5OeWR1c05ldHdvcmsuQVBJ",
            "LlByb3RvY29sLkF0dGFja1NxdWFkSAASVgoZdXNlX3RhcmdldGVkX2FiaWxp",
            "dHlfdW5pdBgHIAEoCzIxLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuVXNl",
            "VGFyZ2V0ZWRBYmlsaXR5VW5pdEgAElgKGnVzZV90YXJnZXRlZF9hYmlsaXR5",
            "X3NxdWFkGAggASgLMjIuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Vc2VU",
            "YXJnZXRlZEFiaWxpdHlTcXVhZEgAEmEKH3VzZV9wb2ludF9jZW50ZXJlZF9h",
            "YmlsaXR5X3VuaXQYCSABKAsyNi5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29s",
            "LlVzZVBvaW50Q2VudGVyZWRBYmlsaXR5VW5pdEgAEmMKIHVzZV9wb2ludF9j",
            "ZW50ZXJlZF9hYmlsaXR5X3NxdWFkGAogASgLMjcuTnlkdXNOZXR3b3JrLkFQ",
            "SS5Qcm90b2NvbC5Vc2VQb2ludENlbnRlcmVkQWJpbGl0eVNxdWFkSAASWgob",
            "dXNlX3RhcmdldGxlc3NfYWJpbGl0eV91bml0GAsgASgLMjMuTnlkdXNOZXR3",
            "b3JrLkFQSS5Qcm90b2NvbC5Vc2VUYXJnZXRsZXNzQWJpbGl0eVVuaXRIABJc",
            "Chx1c2VfdGFyZ2V0bGVzc19hYmlsaXR5X3NxdWFkGAwgASgLMjQuTnlkdXNO",
            "ZXR3b3JrLkFQSS5Qcm90b2NvbC5Vc2VUYXJnZXRsZXNzQWJpbGl0eVNxdWFk",
            "SAASQwoPc21hcnRfbW92ZV91bml0GA0gASgLMiguTnlkdXNOZXR3b3JrLkFQ",
            "SS5Qcm90b2NvbC5TbWFydE1vdmVVbml0SAASRQoQc21hcnRfbW92ZV9zcXVh",
            "ZBgOIAEoCzIpLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuU21hcnRNb3Zl",
            "U3F1YWRIABJQChZzbWFydF9hdHRhY2tfbW92ZV91bml0GA8gASgLMi4uTnlk",
            "dXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5TbWFydEF0dGFja01vdmVVbml0SAAS",
            "UgoXc21hcnRfYXR0YWNrX21vdmVfc3F1YWQYECABKAsyLy5OeWR1c05ldHdv",
            "cmsuQVBJLlByb3RvY29sLlNtYXJ0QXR0YWNrTW92ZVNxdWFkSAASRwoRc21h",
            "cnRfYXR0YWNrX3VuaXQYESABKAsyKi5OeWR1c05ldHdvcmsuQVBJLlByb3Rv",
            "Y29sLlNtYXJ0QXR0YWNrVW5pdEgAEkkKEnNtYXJ0X2F0dGFja19zcXVhZBgS",
            "IAEoCzIrLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuU21hcnRBdHRhY2tT",
            "cXVhZEgAEkAKDXNxdWFkX3JlcXVlc3QYEyABKAsyJy5OeWR1c05ldHdvcmsu",
            "QVBJLlByb3RvY29sLlNxdWFkUmVxdWVzdEgAQgkKB2NvbW1hbmQiXgoITW92",
            "ZVVuaXQSEAoIdW5pdF90YWcYASABKAQSMQoFcG9pbnQYAiABKAsyIi5OeWR1",
            "c05ldHdvcmsuQVBJLlByb3RvY29sLlBvaW50MkQSDQoFcXVldWUYAyABKAgi",
            "XAoJTW92ZVNxdWFkEg0KBXNxdWFkGAEgASgEEjEKBXBvaW50GAIgASgLMiIu",
            "TnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Qb2ludDJEEg0KBXF1ZXVlGAMg",
            "ASgIImQKDkF0dGFja01vdmVVbml0EhAKCHVuaXRfdGFnGAEgASgEEjEKBXBv",
            "aW50GAIgASgLMiIuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Qb2ludDJE",
            "Eg0KBXF1ZXVlGAMgASgIImIKD0F0dGFja01vdmVTcXVhZBINCgVzcXVhZBgB",
            "IAEoBBIxCgVwb2ludBgCIAEoCzIiLk55ZHVzTmV0d29yay5BUEkuUHJvdG9j",
            "b2wuUG9pbnQyRBINCgVxdWV1ZRgDIAEoCCJFCgpBdHRhY2tVbml0EhMKC3Nv",
            "dXJjZV91bml0GAEgASgEEhMKC3RhcmdldF91bml0GAIgASgEEg0KBXF1ZXVl",
            "GAMgASgIIkAKC0F0dGFja1NxdWFkEg0KBXNxdWFkGAEgASgEEhMKC3Rhcmdl",
            "dF91bml0GAIgASgEEg0KBXF1ZXVlGAMgASgIImUKFlVzZVRhcmdldGVkQWJp",
            "bGl0eVVuaXQSEgoKYWJpbGl0eV9pZBgBIAEoBRITCgtzb3VyY2VfdW5pdBgC",
            "IAEoBBITCgt0YXJnZXRfdW5pdBgDIAEoBBINCgVxdWV1ZRgEIAEoCCJgChdV",
            "c2VUYXJnZXRlZEFiaWxpdHlTcXVhZBISCgphYmlsaXR5X2lkGAEgASgFEg0K",
            "BXNxdWFkGAIgASgEEhMKC3RhcmdldF91bml0GAMgASgEEg0KBXF1ZXVlGAQg",
            "ASgIIogBChtVc2VQb2ludENlbnRlcmVkQWJpbGl0eVVuaXQSEgoKYWJpbGl0",
            "eV9pZBgBIAEoBRITCgtzb3VyY2VfdW5pdBgCIAEoBBIxCgVwb2ludBgDIAEo",
            "CzIiLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuUG9pbnQyRBINCgVxdWV1",
            "ZRgEIAEoCCKDAQocVXNlUG9pbnRDZW50ZXJlZEFiaWxpdHlTcXVhZBISCgph",
            "YmlsaXR5X2lkGAEgASgFEg0KBXNxdWFkGAIgASgEEjEKBXBvaW50GAMgASgL",
            "MiIuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Qb2ludDJEEg0KBXF1ZXVl",
            "GAQgASgIIlIKGFVzZVRhcmdldGxlc3NBYmlsaXR5VW5pdBISCgphYmlsaXR5",
            "X2lkGAEgASgFEhMKC3NvdXJjZV91bml0GAIgASgEEg0KBXF1ZXVlGAMgASgI",
            "Ik0KGVVzZVRhcmdldGxlc3NBYmlsaXR5U3F1YWQSEgoKYWJpbGl0eV9pZBgB",
            "IAEoBRINCgVzcXVhZBgCIAEoBBINCgVxdWV1ZRgDIAEoCCJjCg1TbWFydE1v",
            "dmVVbml0EhAKCHVuaXRfdGFnGAEgASgEEjEKBXBvaW50GAIgASgLMiIuTnlk",
            "dXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Qb2ludDJEEg0KBXF1ZXVlGAMgASgI",
            "ImEKDlNtYXJ0TW92ZVNxdWFkEg0KBXNxdWFkGAEgASgEEjEKBXBvaW50GAIg",
            "ASgLMiIuTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Qb2ludDJEEg0KBXF1",
            "ZXVlGAMgASgIImkKE1NtYXJ0QXR0YWNrTW92ZVVuaXQSEAoIdW5pdF90YWcY",
            "ASABKAQSMQoFcG9pbnQYAiABKAsyIi5OeWR1c05ldHdvcmsuQVBJLlByb3Rv",
            "Y29sLlBvaW50MkQSDQoFcXVldWUYAyABKAgiZwoUU21hcnRBdHRhY2tNb3Zl",
            "U3F1YWQSDQoFc3F1YWQYASABKAQSMQoFcG9pbnQYAiABKAsyIi5OeWR1c05l",
            "dHdvcmsuQVBJLlByb3RvY29sLlBvaW50MkQSDQoFcXVldWUYAyABKAgiSgoP",
            "U21hcnRBdHRhY2tVbml0EhMKC3NvdXJjZV91bml0GAEgASgEEhMKC3Rhcmdl",
            "dF91bml0GAIgASgEEg0KBXF1ZXVlGAMgASgIIkUKEFNtYXJ0QXR0YWNrU3F1",
            "YWQSDQoFc3F1YWQYASABKAQSEwoLdGFyZ2V0X3VuaXQYAiABKAQSDQoFcXVl",
            "dWUYAyABKAgigAIKDFNxdWFkUmVxdWVzdBI8CgxjcmVhdGVfc3F1YWQYASAB",
            "KAsyJi5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLkNyZWF0ZVNxdWFkEjwK",
            "DHJlbW92ZV9zcXVhZBgCIAEoCzImLk55ZHVzTmV0d29yay5BUEkuUHJvdG9j",
            "b2wuUmVtb3ZlU3F1YWQSNgoJYWRkX3VuaXRzGAMgASgLMiMuTnlkdXNOZXR3",
            "b3JrLkFQSS5Qcm90b2NvbC5BZGRVbml0cxI8CgxyZW1vdmVfdW5pdHMYBCAB",
            "KAsyJi5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLlJlbW92ZVVuaXRzIkIK",
            "C0NyZWF0ZVNxdWFkEjMKBXNxdWFkGAEgASgLMiQuTnlkdXNOZXR3b3JrLkFQ",
            "SS5Qcm90b2NvbC5TcXVhZERhdGEiHwoLUmVtb3ZlU3F1YWQSEAoIc3F1YWRf",
            "aWQYASABKAQiKgoIQWRkVW5pdHMSEAoIc3F1YWRfaWQYASABKAQSDAoEdGFn",
            "cxgCIAMoBCItCgtSZW1vdmVVbml0cxIQCghzcXVhZF9pZBgBIAEoBBIMCgR0",
            "YWdzGAIgAygEIlYKClJhd1JlcXVlc3QSMwoHcmVxdWVzdBgBIAEoCzIiLk55",
            "ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuUmVxdWVzdBITCgtnZXRSZXNwb25z",
            "ZRgCIAEoCCJJCgxOb3RpZmljYXRpb24SOQoEdHlwZRgBIAEoDjIrLk55ZHVz",
            "TmV0d29yay5BUEkuUHJvdG9jb2wuTm90aWZpY2F0aW9uVHlwZSIMCgpBYmF0",
            "aHVyTWFwItoCCgpDb2xvbnlEYXRhEg4KBmNvbF9pZBgBIAEoDRIxCgVwb2lu",
            "dBgCIAEoCzIiLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuUG9pbnQyRBIc",
            "ChRpc19zdGFydGluZ19sb2NhdGlvbhgDIAEoCBIxCghtaW5lcmFscxgEIAMo",
            "CzIfLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuVW5pdBIwCgd2ZXNwZW5l",
            "GAUgAygLMh8uTnlkdXNOZXR3b3JrLkFQSS5Qcm90b2NvbC5Vbml0EjMKCnN0",
            "cnVjdHVyZXMYBiADKAsyHy5OeWR1c05ldHdvcmsuQVBJLlByb3RvY29sLlVu",
            "aXQSMAoHd29ya2VycxgHIAMoCzIfLk55ZHVzTmV0d29yay5BUEkuUHJvdG9j",
            "b2wuVW5pdBIfChdkZXNpcmVkX3Zlc3BlbmVfd29ya2VycxgIIAEoBSJbCglT",
            "cXVhZERhdGESEAoIc3F1YWRfaWQYASABKAQSDAoEbmFtZRgCIAEoCRIuCgV1",
            "bml0cxgDIAMoCzIfLk55ZHVzTmV0d29yay5BUEkuUHJvdG9jb2wuVW5pdCp0",
            "ChBOb3RpZmljYXRpb25UeXBlEggKBE5PTkUQABIOCgpJbml0aWFsaXplEAES",
            "DQoJR2FtZVN0YXJ0EAISDAoIR2FtZVN0ZXAQAxINCglHYW1lRW5kZWQQBBIL",
            "CgdSZXN0YXJ0EAUSDQoJVGVybWluYXRlEGNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NydusNetwork.API.Protocol.CommonReflection.Descriptor, global::NydusNetwork.API.Protocol.Sc2ApiReflection.Descriptor, global::NydusNetwork.API.Protocol.DataReflection.Descriptor, global::NydusNetwork.API.Protocol.RawReflection.Descriptor, global::NydusNetwork.API.Protocol.ScoreReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::NydusNetwork.API.Protocol.NotificationType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AbathurRequest), global::NydusNetwork.API.Protocol.AbathurRequest.Parser, new[]{ "Intel", "Production", "Combat", "Raw" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AbathurResponse), global::NydusNetwork.API.Protocol.AbathurResponse.Parser, new[]{ "Intel", "Notification", "RawResponse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.IntelRequest), global::NydusNetwork.API.Protocol.IntelRequest.Parser, new[]{ "Map", "Score", "Common", "UpgradesSelf", "BuildingsSelf", "UnitsSelf", "WorkersSelf", "Destructibles", "StructuresEnemy", "UnitsEnemy", "WorkersEnemy", "PrimaryColony", "Colonies", "MineralFields", "VespeneGeysers", "ProductionQueue", "Squads", "GameLoop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.IntelResponse), global::NydusNetwork.API.Protocol.IntelResponse.Parser, new[]{ "Map", "Score", "Common", "UpgradesSelf", "BuildingsSelf", "UnitsSelf", "WorkersSelf", "Destructibles", "StructuresEnemy", "UnitsEnemy", "WorkersEnemy", "PrimaryColony", "Colonies", "MineralFields", "VespeneGeysers", "ProductionQueue", "Squads", "GameLoop" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.ProductionRequest), global::NydusNetwork.API.Protocol.ProductionRequest.Parser, new[]{ "ClearBuildOrder", "QueueUnit", "QueueTech" }, new[]{ "Call" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.ClearBuildOrder), global::NydusNetwork.API.Protocol.ClearBuildOrder.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.QueueUnit), global::NydusNetwork.API.Protocol.QueueUnit.Parser, new[]{ "UnitId", "Pos", "Spacing", "Skippable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.QueueTech), global::NydusNetwork.API.Protocol.QueueTech.Parser, new[]{ "UpgradeId", "Skippable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.CombatRequest), global::NydusNetwork.API.Protocol.CombatRequest.Parser, new[]{ "MoveUnit", "MoveSquad", "AttackMoveUnit", "AttackMoveSquad", "AttackUnit", "AttackSquad", "UseTargetedAbilityUnit", "UseTargetedAbilitySquad", "UsePointCenteredAbilityUnit", "UsePointCenteredAbilitySquad", "UseTargetlessAbilityUnit", "UseTargetlessAbilitySquad", "SmartMoveUnit", "SmartMoveSquad", "SmartAttackMoveUnit", "SmartAttackMoveSquad", "SmartAttackUnit", "SmartAttackSquad", "SquadRequest" }, new[]{ "Command" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.MoveUnit), global::NydusNetwork.API.Protocol.MoveUnit.Parser, new[]{ "UnitTag", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.MoveSquad), global::NydusNetwork.API.Protocol.MoveSquad.Parser, new[]{ "Squad", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AttackMoveUnit), global::NydusNetwork.API.Protocol.AttackMoveUnit.Parser, new[]{ "UnitTag", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AttackMoveSquad), global::NydusNetwork.API.Protocol.AttackMoveSquad.Parser, new[]{ "Squad", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AttackUnit), global::NydusNetwork.API.Protocol.AttackUnit.Parser, new[]{ "SourceUnit", "TargetUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AttackSquad), global::NydusNetwork.API.Protocol.AttackSquad.Parser, new[]{ "Squad", "TargetUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit), global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit.Parser, new[]{ "AbilityId", "SourceUnit", "TargetUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad), global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad.Parser, new[]{ "AbilityId", "Squad", "TargetUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit), global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit.Parser, new[]{ "AbilityId", "SourceUnit", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad), global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad.Parser, new[]{ "AbilityId", "Squad", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit), global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit.Parser, new[]{ "AbilityId", "SourceUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad), global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad.Parser, new[]{ "AbilityId", "Squad", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SmartMoveUnit), global::NydusNetwork.API.Protocol.SmartMoveUnit.Parser, new[]{ "UnitTag", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SmartMoveSquad), global::NydusNetwork.API.Protocol.SmartMoveSquad.Parser, new[]{ "Squad", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SmartAttackMoveUnit), global::NydusNetwork.API.Protocol.SmartAttackMoveUnit.Parser, new[]{ "UnitTag", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SmartAttackMoveSquad), global::NydusNetwork.API.Protocol.SmartAttackMoveSquad.Parser, new[]{ "Squad", "Point", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SmartAttackUnit), global::NydusNetwork.API.Protocol.SmartAttackUnit.Parser, new[]{ "SourceUnit", "TargetUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SmartAttackSquad), global::NydusNetwork.API.Protocol.SmartAttackSquad.Parser, new[]{ "Squad", "TargetUnit", "Queue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SquadRequest), global::NydusNetwork.API.Protocol.SquadRequest.Parser, new[]{ "CreateSquad", "RemoveSquad", "AddUnits", "RemoveUnits" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.CreateSquad), global::NydusNetwork.API.Protocol.CreateSquad.Parser, new[]{ "Squad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.RemoveSquad), global::NydusNetwork.API.Protocol.RemoveSquad.Parser, new[]{ "SquadId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AddUnits), global::NydusNetwork.API.Protocol.AddUnits.Parser, new[]{ "SquadId", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.RemoveUnits), global::NydusNetwork.API.Protocol.RemoveUnits.Parser, new[]{ "SquadId", "Tags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.RawRequest), global::NydusNetwork.API.Protocol.RawRequest.Parser, new[]{ "Request", "GetResponse" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.Notification), global::NydusNetwork.API.Protocol.Notification.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.AbathurMap), global::NydusNetwork.API.Protocol.AbathurMap.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.ColonyData), global::NydusNetwork.API.Protocol.ColonyData.Parser, new[]{ "ColId", "Point", "IsStartingLocation", "Minerals", "Vespene", "Structures", "Workers", "DesiredVespeneWorkers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NydusNetwork.API.Protocol.SquadData), global::NydusNetwork.API.Protocol.SquadData.Parser, new[]{ "SquadId", "Name", "Units" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum NotificationType {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("Initialize")] Initialize = 1,
    [pbr::OriginalName("GameStart")] GameStart = 2,
    [pbr::OriginalName("GameStep")] GameStep = 3,
    [pbr::OriginalName("GameEnded")] GameEnded = 4,
    [pbr::OriginalName("Restart")] Restart = 5,
    [pbr::OriginalName("Terminate")] Terminate = 99,
  }

  #endregion

  #region Messages
  public sealed partial class AbathurRequest : pb::IMessage<AbathurRequest> {
    private static readonly pb::MessageParser<AbathurRequest> _parser = new pb::MessageParser<AbathurRequest>(() => new AbathurRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbathurRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurRequest(AbathurRequest other) : this() {
      Intel = other.intel_ != null ? other.Intel.Clone() : null;
      production_ = other.production_.Clone();
      combat_ = other.combat_.Clone();
      Raw = other.raw_ != null ? other.Raw.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurRequest Clone() {
      return new AbathurRequest(this);
    }

    /// <summary>Field number for the "intel" field.</summary>
    public const int IntelFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.IntelRequest intel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.IntelRequest Intel {
      get { return intel_; }
      set {
        intel_ = value;
      }
    }

    /// <summary>Field number for the "production" field.</summary>
    public const int ProductionFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.ProductionRequest> _repeated_production_codec
        = pb::FieldCodec.ForMessage(26, global::NydusNetwork.API.Protocol.ProductionRequest.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.ProductionRequest> production_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.ProductionRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.ProductionRequest> Production {
      get { return production_; }
    }

    /// <summary>Field number for the "combat" field.</summary>
    public const int CombatFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.CombatRequest> _repeated_combat_codec
        = pb::FieldCodec.ForMessage(34, global::NydusNetwork.API.Protocol.CombatRequest.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.CombatRequest> combat_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.CombatRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.CombatRequest> Combat {
      get { return combat_; }
    }

    /// <summary>Field number for the "raw" field.</summary>
    public const int RawFieldNumber = 5;
    private global::NydusNetwork.API.Protocol.RawRequest raw_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.RawRequest Raw {
      get { return raw_; }
      set {
        raw_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbathurRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbathurRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Intel, other.Intel)) return false;
      if(!production_.Equals(other.production_)) return false;
      if(!combat_.Equals(other.combat_)) return false;
      if (!object.Equals(Raw, other.Raw)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (intel_ != null) hash ^= Intel.GetHashCode();
      hash ^= production_.GetHashCode();
      hash ^= combat_.GetHashCode();
      if (raw_ != null) hash ^= Raw.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (intel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Intel);
      }
      production_.WriteTo(output, _repeated_production_codec);
      combat_.WriteTo(output, _repeated_combat_codec);
      if (raw_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Raw);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (intel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intel);
      }
      size += production_.CalculateSize(_repeated_production_codec);
      size += combat_.CalculateSize(_repeated_combat_codec);
      if (raw_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Raw);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbathurRequest other) {
      if (other == null) {
        return;
      }
      if (other.intel_ != null) {
        if (intel_ == null) {
          intel_ = new global::NydusNetwork.API.Protocol.IntelRequest();
        }
        Intel.MergeFrom(other.Intel);
      }
      production_.Add(other.production_);
      combat_.Add(other.combat_);
      if (other.raw_ != null) {
        if (raw_ == null) {
          raw_ = new global::NydusNetwork.API.Protocol.RawRequest();
        }
        Raw.MergeFrom(other.Raw);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (intel_ == null) {
              intel_ = new global::NydusNetwork.API.Protocol.IntelRequest();
            }
            input.ReadMessage(intel_);
            break;
          }
          case 26: {
            production_.AddEntriesFrom(input, _repeated_production_codec);
            break;
          }
          case 34: {
            combat_.AddEntriesFrom(input, _repeated_combat_codec);
            break;
          }
          case 42: {
            if (raw_ == null) {
              raw_ = new global::NydusNetwork.API.Protocol.RawRequest();
            }
            input.ReadMessage(raw_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbathurResponse : pb::IMessage<AbathurResponse> {
    private static readonly pb::MessageParser<AbathurResponse> _parser = new pb::MessageParser<AbathurResponse>(() => new AbathurResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbathurResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurResponse(AbathurResponse other) : this() {
      Intel = other.intel_ != null ? other.Intel.Clone() : null;
      Notification = other.notification_ != null ? other.Notification.Clone() : null;
      RawResponse = other.rawResponse_ != null ? other.RawResponse.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurResponse Clone() {
      return new AbathurResponse(this);
    }

    /// <summary>Field number for the "intel" field.</summary>
    public const int IntelFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.IntelResponse intel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.IntelResponse Intel {
      get { return intel_; }
      set {
        intel_ = value;
      }
    }

    /// <summary>Field number for the "notification" field.</summary>
    public const int NotificationFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Notification notification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Notification Notification {
      get { return notification_; }
      set {
        notification_ = value;
      }
    }

    /// <summary>Field number for the "rawResponse" field.</summary>
    public const int RawResponseFieldNumber = 3;
    private global::NydusNetwork.API.Protocol.Response rawResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Response RawResponse {
      get { return rawResponse_; }
      set {
        rawResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbathurResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbathurResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Intel, other.Intel)) return false;
      if (!object.Equals(Notification, other.Notification)) return false;
      if (!object.Equals(RawResponse, other.RawResponse)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (intel_ != null) hash ^= Intel.GetHashCode();
      if (notification_ != null) hash ^= Notification.GetHashCode();
      if (rawResponse_ != null) hash ^= RawResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (intel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Intel);
      }
      if (notification_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Notification);
      }
      if (rawResponse_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RawResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (intel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Intel);
      }
      if (notification_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Notification);
      }
      if (rawResponse_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawResponse);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbathurResponse other) {
      if (other == null) {
        return;
      }
      if (other.intel_ != null) {
        if (intel_ == null) {
          intel_ = new global::NydusNetwork.API.Protocol.IntelResponse();
        }
        Intel.MergeFrom(other.Intel);
      }
      if (other.notification_ != null) {
        if (notification_ == null) {
          notification_ = new global::NydusNetwork.API.Protocol.Notification();
        }
        Notification.MergeFrom(other.Notification);
      }
      if (other.rawResponse_ != null) {
        if (rawResponse_ == null) {
          rawResponse_ = new global::NydusNetwork.API.Protocol.Response();
        }
        RawResponse.MergeFrom(other.RawResponse);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (intel_ == null) {
              intel_ = new global::NydusNetwork.API.Protocol.IntelResponse();
            }
            input.ReadMessage(intel_);
            break;
          }
          case 18: {
            if (notification_ == null) {
              notification_ = new global::NydusNetwork.API.Protocol.Notification();
            }
            input.ReadMessage(notification_);
            break;
          }
          case 26: {
            if (rawResponse_ == null) {
              rawResponse_ = new global::NydusNetwork.API.Protocol.Response();
            }
            input.ReadMessage(rawResponse_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntelRequest : pb::IMessage<IntelRequest> {
    private static readonly pb::MessageParser<IntelRequest> _parser = new pb::MessageParser<IntelRequest>(() => new IntelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntelRequest(IntelRequest other) : this() {
      map_ = other.map_;
      score_ = other.score_;
      common_ = other.common_;
      upgradesSelf_ = other.upgradesSelf_;
      buildingsSelf_ = other.buildingsSelf_;
      unitsSelf_ = other.unitsSelf_;
      workersSelf_ = other.workersSelf_;
      destructibles_ = other.destructibles_;
      structuresEnemy_ = other.structuresEnemy_;
      unitsEnemy_ = other.unitsEnemy_;
      workersEnemy_ = other.workersEnemy_;
      primaryColony_ = other.primaryColony_;
      colonies_ = other.colonies_;
      mineralFields_ = other.mineralFields_;
      vespeneGeysers_ = other.vespeneGeysers_;
      productionQueue_ = other.productionQueue_;
      squads_ = other.squads_;
      gameLoop_ = other.gameLoop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntelRequest Clone() {
      return new IntelRequest(this);
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private bool map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private bool score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private bool common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "upgrades_self" field.</summary>
    public const int UpgradesSelfFieldNumber = 4;
    private bool upgradesSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UpgradesSelf {
      get { return upgradesSelf_; }
      set {
        upgradesSelf_ = value;
      }
    }

    /// <summary>Field number for the "buildings_self" field.</summary>
    public const int BuildingsSelfFieldNumber = 5;
    private bool buildingsSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BuildingsSelf {
      get { return buildingsSelf_; }
      set {
        buildingsSelf_ = value;
      }
    }

    /// <summary>Field number for the "units_self" field.</summary>
    public const int UnitsSelfFieldNumber = 6;
    private bool unitsSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnitsSelf {
      get { return unitsSelf_; }
      set {
        unitsSelf_ = value;
      }
    }

    /// <summary>Field number for the "workers_self" field.</summary>
    public const int WorkersSelfFieldNumber = 7;
    private bool workersSelf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WorkersSelf {
      get { return workersSelf_; }
      set {
        workersSelf_ = value;
      }
    }

    /// <summary>Field number for the "destructibles" field.</summary>
    public const int DestructiblesFieldNumber = 8;
    private bool destructibles_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Destructibles {
      get { return destructibles_; }
      set {
        destructibles_ = value;
      }
    }

    /// <summary>Field number for the "structures_enemy" field.</summary>
    public const int StructuresEnemyFieldNumber = 9;
    private bool structuresEnemy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StructuresEnemy {
      get { return structuresEnemy_; }
      set {
        structuresEnemy_ = value;
      }
    }

    /// <summary>Field number for the "units_enemy" field.</summary>
    public const int UnitsEnemyFieldNumber = 10;
    private bool unitsEnemy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UnitsEnemy {
      get { return unitsEnemy_; }
      set {
        unitsEnemy_ = value;
      }
    }

    /// <summary>Field number for the "workers_enemy" field.</summary>
    public const int WorkersEnemyFieldNumber = 11;
    private bool workersEnemy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WorkersEnemy {
      get { return workersEnemy_; }
      set {
        workersEnemy_ = value;
      }
    }

    /// <summary>Field number for the "primary_colony" field.</summary>
    public const int PrimaryColonyFieldNumber = 15;
    private bool primaryColony_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrimaryColony {
      get { return primaryColony_; }
      set {
        primaryColony_ = value;
      }
    }

    /// <summary>Field number for the "colonies" field.</summary>
    public const int ColoniesFieldNumber = 16;
    private bool colonies_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Colonies {
      get { return colonies_; }
      set {
        colonies_ = value;
      }
    }

    /// <summary>Field number for the "mineral_fields" field.</summary>
    public const int MineralFieldsFieldNumber = 17;
    private bool mineralFields_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MineralFields {
      get { return mineralFields_; }
      set {
        mineralFields_ = value;
      }
    }

    /// <summary>Field number for the "VespeneGeysers" field.</summary>
    public const int VespeneGeysersFieldNumber = 18;
    private bool vespeneGeysers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool VespeneGeysers {
      get { return vespeneGeysers_; }
      set {
        vespeneGeysers_ = value;
      }
    }

    /// <summary>Field number for the "production_queue" field.</summary>
    public const int ProductionQueueFieldNumber = 19;
    private bool productionQueue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ProductionQueue {
      get { return productionQueue_; }
      set {
        productionQueue_ = value;
      }
    }

    /// <summary>Field number for the "squads" field.</summary>
    public const int SquadsFieldNumber = 20;
    private bool squads_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Squads {
      get { return squads_; }
      set {
        squads_ = value;
      }
    }

    /// <summary>Field number for the "game_loop" field.</summary>
    public const int GameLoopFieldNumber = 21;
    private bool gameLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GameLoop {
      get { return gameLoop_; }
      set {
        gameLoop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Map != other.Map) return false;
      if (Score != other.Score) return false;
      if (Common != other.Common) return false;
      if (UpgradesSelf != other.UpgradesSelf) return false;
      if (BuildingsSelf != other.BuildingsSelf) return false;
      if (UnitsSelf != other.UnitsSelf) return false;
      if (WorkersSelf != other.WorkersSelf) return false;
      if (Destructibles != other.Destructibles) return false;
      if (StructuresEnemy != other.StructuresEnemy) return false;
      if (UnitsEnemy != other.UnitsEnemy) return false;
      if (WorkersEnemy != other.WorkersEnemy) return false;
      if (PrimaryColony != other.PrimaryColony) return false;
      if (Colonies != other.Colonies) return false;
      if (MineralFields != other.MineralFields) return false;
      if (VespeneGeysers != other.VespeneGeysers) return false;
      if (ProductionQueue != other.ProductionQueue) return false;
      if (Squads != other.Squads) return false;
      if (GameLoop != other.GameLoop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Map != false) hash ^= Map.GetHashCode();
      if (Score != false) hash ^= Score.GetHashCode();
      if (Common != false) hash ^= Common.GetHashCode();
      if (UpgradesSelf != false) hash ^= UpgradesSelf.GetHashCode();
      if (BuildingsSelf != false) hash ^= BuildingsSelf.GetHashCode();
      if (UnitsSelf != false) hash ^= UnitsSelf.GetHashCode();
      if (WorkersSelf != false) hash ^= WorkersSelf.GetHashCode();
      if (Destructibles != false) hash ^= Destructibles.GetHashCode();
      if (StructuresEnemy != false) hash ^= StructuresEnemy.GetHashCode();
      if (UnitsEnemy != false) hash ^= UnitsEnemy.GetHashCode();
      if (WorkersEnemy != false) hash ^= WorkersEnemy.GetHashCode();
      if (PrimaryColony != false) hash ^= PrimaryColony.GetHashCode();
      if (Colonies != false) hash ^= Colonies.GetHashCode();
      if (MineralFields != false) hash ^= MineralFields.GetHashCode();
      if (VespeneGeysers != false) hash ^= VespeneGeysers.GetHashCode();
      if (ProductionQueue != false) hash ^= ProductionQueue.GetHashCode();
      if (Squads != false) hash ^= Squads.GetHashCode();
      if (GameLoop != false) hash ^= GameLoop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Map != false) {
        output.WriteRawTag(8);
        output.WriteBool(Map);
      }
      if (Score != false) {
        output.WriteRawTag(16);
        output.WriteBool(Score);
      }
      if (Common != false) {
        output.WriteRawTag(24);
        output.WriteBool(Common);
      }
      if (UpgradesSelf != false) {
        output.WriteRawTag(32);
        output.WriteBool(UpgradesSelf);
      }
      if (BuildingsSelf != false) {
        output.WriteRawTag(40);
        output.WriteBool(BuildingsSelf);
      }
      if (UnitsSelf != false) {
        output.WriteRawTag(48);
        output.WriteBool(UnitsSelf);
      }
      if (WorkersSelf != false) {
        output.WriteRawTag(56);
        output.WriteBool(WorkersSelf);
      }
      if (Destructibles != false) {
        output.WriteRawTag(64);
        output.WriteBool(Destructibles);
      }
      if (StructuresEnemy != false) {
        output.WriteRawTag(72);
        output.WriteBool(StructuresEnemy);
      }
      if (UnitsEnemy != false) {
        output.WriteRawTag(80);
        output.WriteBool(UnitsEnemy);
      }
      if (WorkersEnemy != false) {
        output.WriteRawTag(88);
        output.WriteBool(WorkersEnemy);
      }
      if (PrimaryColony != false) {
        output.WriteRawTag(120);
        output.WriteBool(PrimaryColony);
      }
      if (Colonies != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Colonies);
      }
      if (MineralFields != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(MineralFields);
      }
      if (VespeneGeysers != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(VespeneGeysers);
      }
      if (ProductionQueue != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ProductionQueue);
      }
      if (Squads != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Squads);
      }
      if (GameLoop != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(GameLoop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Map != false) {
        size += 1 + 1;
      }
      if (Score != false) {
        size += 1 + 1;
      }
      if (Common != false) {
        size += 1 + 1;
      }
      if (UpgradesSelf != false) {
        size += 1 + 1;
      }
      if (BuildingsSelf != false) {
        size += 1 + 1;
      }
      if (UnitsSelf != false) {
        size += 1 + 1;
      }
      if (WorkersSelf != false) {
        size += 1 + 1;
      }
      if (Destructibles != false) {
        size += 1 + 1;
      }
      if (StructuresEnemy != false) {
        size += 1 + 1;
      }
      if (UnitsEnemy != false) {
        size += 1 + 1;
      }
      if (WorkersEnemy != false) {
        size += 1 + 1;
      }
      if (PrimaryColony != false) {
        size += 1 + 1;
      }
      if (Colonies != false) {
        size += 2 + 1;
      }
      if (MineralFields != false) {
        size += 2 + 1;
      }
      if (VespeneGeysers != false) {
        size += 2 + 1;
      }
      if (ProductionQueue != false) {
        size += 2 + 1;
      }
      if (Squads != false) {
        size += 2 + 1;
      }
      if (GameLoop != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Map != false) {
        Map = other.Map;
      }
      if (other.Score != false) {
        Score = other.Score;
      }
      if (other.Common != false) {
        Common = other.Common;
      }
      if (other.UpgradesSelf != false) {
        UpgradesSelf = other.UpgradesSelf;
      }
      if (other.BuildingsSelf != false) {
        BuildingsSelf = other.BuildingsSelf;
      }
      if (other.UnitsSelf != false) {
        UnitsSelf = other.UnitsSelf;
      }
      if (other.WorkersSelf != false) {
        WorkersSelf = other.WorkersSelf;
      }
      if (other.Destructibles != false) {
        Destructibles = other.Destructibles;
      }
      if (other.StructuresEnemy != false) {
        StructuresEnemy = other.StructuresEnemy;
      }
      if (other.UnitsEnemy != false) {
        UnitsEnemy = other.UnitsEnemy;
      }
      if (other.WorkersEnemy != false) {
        WorkersEnemy = other.WorkersEnemy;
      }
      if (other.PrimaryColony != false) {
        PrimaryColony = other.PrimaryColony;
      }
      if (other.Colonies != false) {
        Colonies = other.Colonies;
      }
      if (other.MineralFields != false) {
        MineralFields = other.MineralFields;
      }
      if (other.VespeneGeysers != false) {
        VespeneGeysers = other.VespeneGeysers;
      }
      if (other.ProductionQueue != false) {
        ProductionQueue = other.ProductionQueue;
      }
      if (other.Squads != false) {
        Squads = other.Squads;
      }
      if (other.GameLoop != false) {
        GameLoop = other.GameLoop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Map = input.ReadBool();
            break;
          }
          case 16: {
            Score = input.ReadBool();
            break;
          }
          case 24: {
            Common = input.ReadBool();
            break;
          }
          case 32: {
            UpgradesSelf = input.ReadBool();
            break;
          }
          case 40: {
            BuildingsSelf = input.ReadBool();
            break;
          }
          case 48: {
            UnitsSelf = input.ReadBool();
            break;
          }
          case 56: {
            WorkersSelf = input.ReadBool();
            break;
          }
          case 64: {
            Destructibles = input.ReadBool();
            break;
          }
          case 72: {
            StructuresEnemy = input.ReadBool();
            break;
          }
          case 80: {
            UnitsEnemy = input.ReadBool();
            break;
          }
          case 88: {
            WorkersEnemy = input.ReadBool();
            break;
          }
          case 120: {
            PrimaryColony = input.ReadBool();
            break;
          }
          case 128: {
            Colonies = input.ReadBool();
            break;
          }
          case 136: {
            MineralFields = input.ReadBool();
            break;
          }
          case 144: {
            VespeneGeysers = input.ReadBool();
            break;
          }
          case 152: {
            ProductionQueue = input.ReadBool();
            break;
          }
          case 160: {
            Squads = input.ReadBool();
            break;
          }
          case 168: {
            GameLoop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntelResponse : pb::IMessage<IntelResponse> {
    private static readonly pb::MessageParser<IntelResponse> _parser = new pb::MessageParser<IntelResponse>(() => new IntelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntelResponse(IntelResponse other) : this() {
      Map = other.map_ != null ? other.Map.Clone() : null;
      Score = other.score_ != null ? other.Score.Clone() : null;
      Common = other.common_ != null ? other.Common.Clone() : null;
      upgradesSelf_ = other.upgradesSelf_.Clone();
      buildingsSelf_ = other.buildingsSelf_.Clone();
      unitsSelf_ = other.unitsSelf_.Clone();
      workersSelf_ = other.workersSelf_.Clone();
      destructibles_ = other.destructibles_.Clone();
      structuresEnemy_ = other.structuresEnemy_.Clone();
      unitsEnemy_ = other.unitsEnemy_.Clone();
      workersEnemy_ = other.workersEnemy_.Clone();
      PrimaryColony = other.primaryColony_ != null ? other.PrimaryColony.Clone() : null;
      colonies_ = other.colonies_.Clone();
      mineralFields_ = other.mineralFields_.Clone();
      vespeneGeysers_ = other.vespeneGeysers_.Clone();
      productionQueue_ = other.productionQueue_.Clone();
      squads_ = other.squads_.Clone();
      gameLoop_ = other.gameLoop_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntelResponse Clone() {
      return new IntelResponse(this);
    }

    /// <summary>Field number for the "map" field.</summary>
    public const int MapFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.AbathurMap map_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.AbathurMap Map {
      get { return map_; }
      set {
        map_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Score score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Score Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "common" field.</summary>
    public const int CommonFieldNumber = 3;
    private global::NydusNetwork.API.Protocol.PlayerCommon common_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.PlayerCommon Common {
      get { return common_; }
      set {
        common_ = value;
      }
    }

    /// <summary>Field number for the "upgrades_self" field.</summary>
    public const int UpgradesSelfFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.UpgradeData> _repeated_upgradesSelf_codec
        = pb::FieldCodec.ForMessage(34, global::NydusNetwork.API.Protocol.UpgradeData.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.UpgradeData> upgradesSelf_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.UpgradeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.UpgradeData> UpgradesSelf {
      get { return upgradesSelf_; }
    }

    /// <summary>Field number for the "buildings_self" field.</summary>
    public const int BuildingsSelfFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_buildingsSelf_codec
        = pb::FieldCodec.ForMessage(42, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> buildingsSelf_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> BuildingsSelf {
      get { return buildingsSelf_; }
    }

    /// <summary>Field number for the "units_self" field.</summary>
    public const int UnitsSelfFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_unitsSelf_codec
        = pb::FieldCodec.ForMessage(50, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> unitsSelf_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> UnitsSelf {
      get { return unitsSelf_; }
    }

    /// <summary>Field number for the "workers_self" field.</summary>
    public const int WorkersSelfFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_workersSelf_codec
        = pb::FieldCodec.ForMessage(58, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> workersSelf_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> WorkersSelf {
      get { return workersSelf_; }
    }

    /// <summary>Field number for the "destructibles" field.</summary>
    public const int DestructiblesFieldNumber = 8;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_destructibles_codec
        = pb::FieldCodec.ForMessage(66, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> destructibles_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> Destructibles {
      get { return destructibles_; }
    }

    /// <summary>Field number for the "structures_enemy" field.</summary>
    public const int StructuresEnemyFieldNumber = 9;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_structuresEnemy_codec
        = pb::FieldCodec.ForMessage(74, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> structuresEnemy_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> StructuresEnemy {
      get { return structuresEnemy_; }
    }

    /// <summary>Field number for the "units_enemy" field.</summary>
    public const int UnitsEnemyFieldNumber = 10;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_unitsEnemy_codec
        = pb::FieldCodec.ForMessage(82, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> unitsEnemy_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> UnitsEnemy {
      get { return unitsEnemy_; }
    }

    /// <summary>Field number for the "workers_enemy" field.</summary>
    public const int WorkersEnemyFieldNumber = 11;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_workersEnemy_codec
        = pb::FieldCodec.ForMessage(90, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> workersEnemy_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> WorkersEnemy {
      get { return workersEnemy_; }
    }

    /// <summary>Field number for the "primary_colony" field.</summary>
    public const int PrimaryColonyFieldNumber = 15;
    private global::NydusNetwork.API.Protocol.ColonyData primaryColony_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.ColonyData PrimaryColony {
      get { return primaryColony_; }
      set {
        primaryColony_ = value;
      }
    }

    /// <summary>Field number for the "colonies" field.</summary>
    public const int ColoniesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.ColonyData> _repeated_colonies_codec
        = pb::FieldCodec.ForMessage(130, global::NydusNetwork.API.Protocol.ColonyData.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.ColonyData> colonies_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.ColonyData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.ColonyData> Colonies {
      get { return colonies_; }
    }

    /// <summary>Field number for the "mineral_fields" field.</summary>
    public const int MineralFieldsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_mineralFields_codec
        = pb::FieldCodec.ForMessage(138, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> mineralFields_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> MineralFields {
      get { return mineralFields_; }
    }

    /// <summary>Field number for the "vespene_geysers" field.</summary>
    public const int VespeneGeysersFieldNumber = 18;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_vespeneGeysers_codec
        = pb::FieldCodec.ForMessage(146, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> vespeneGeysers_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> VespeneGeysers {
      get { return vespeneGeysers_; }
    }

    /// <summary>Field number for the "production_queue" field.</summary>
    public const int ProductionQueueFieldNumber = 19;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.UnitTypeData> _repeated_productionQueue_codec
        = pb::FieldCodec.ForMessage(154, global::NydusNetwork.API.Protocol.UnitTypeData.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.UnitTypeData> productionQueue_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.UnitTypeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.UnitTypeData> ProductionQueue {
      get { return productionQueue_; }
    }

    /// <summary>Field number for the "squads" field.</summary>
    public const int SquadsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.SquadData> _repeated_squads_codec
        = pb::FieldCodec.ForMessage(162, global::NydusNetwork.API.Protocol.SquadData.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.SquadData> squads_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.SquadData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.SquadData> Squads {
      get { return squads_; }
    }

    /// <summary>Field number for the "game_loop" field.</summary>
    public const int GameLoopFieldNumber = 21;
    private uint gameLoop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GameLoop {
      get { return gameLoop_; }
      set {
        gameLoop_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Map, other.Map)) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if (!object.Equals(Common, other.Common)) return false;
      if(!upgradesSelf_.Equals(other.upgradesSelf_)) return false;
      if(!buildingsSelf_.Equals(other.buildingsSelf_)) return false;
      if(!unitsSelf_.Equals(other.unitsSelf_)) return false;
      if(!workersSelf_.Equals(other.workersSelf_)) return false;
      if(!destructibles_.Equals(other.destructibles_)) return false;
      if(!structuresEnemy_.Equals(other.structuresEnemy_)) return false;
      if(!unitsEnemy_.Equals(other.unitsEnemy_)) return false;
      if(!workersEnemy_.Equals(other.workersEnemy_)) return false;
      if (!object.Equals(PrimaryColony, other.PrimaryColony)) return false;
      if(!colonies_.Equals(other.colonies_)) return false;
      if(!mineralFields_.Equals(other.mineralFields_)) return false;
      if(!vespeneGeysers_.Equals(other.vespeneGeysers_)) return false;
      if(!productionQueue_.Equals(other.productionQueue_)) return false;
      if(!squads_.Equals(other.squads_)) return false;
      if (GameLoop != other.GameLoop) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (map_ != null) hash ^= Map.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      if (common_ != null) hash ^= Common.GetHashCode();
      hash ^= upgradesSelf_.GetHashCode();
      hash ^= buildingsSelf_.GetHashCode();
      hash ^= unitsSelf_.GetHashCode();
      hash ^= workersSelf_.GetHashCode();
      hash ^= destructibles_.GetHashCode();
      hash ^= structuresEnemy_.GetHashCode();
      hash ^= unitsEnemy_.GetHashCode();
      hash ^= workersEnemy_.GetHashCode();
      if (primaryColony_ != null) hash ^= PrimaryColony.GetHashCode();
      hash ^= colonies_.GetHashCode();
      hash ^= mineralFields_.GetHashCode();
      hash ^= vespeneGeysers_.GetHashCode();
      hash ^= productionQueue_.GetHashCode();
      hash ^= squads_.GetHashCode();
      if (GameLoop != 0) hash ^= GameLoop.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (map_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Map);
      }
      if (score_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Score);
      }
      if (common_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Common);
      }
      upgradesSelf_.WriteTo(output, _repeated_upgradesSelf_codec);
      buildingsSelf_.WriteTo(output, _repeated_buildingsSelf_codec);
      unitsSelf_.WriteTo(output, _repeated_unitsSelf_codec);
      workersSelf_.WriteTo(output, _repeated_workersSelf_codec);
      destructibles_.WriteTo(output, _repeated_destructibles_codec);
      structuresEnemy_.WriteTo(output, _repeated_structuresEnemy_codec);
      unitsEnemy_.WriteTo(output, _repeated_unitsEnemy_codec);
      workersEnemy_.WriteTo(output, _repeated_workersEnemy_codec);
      if (primaryColony_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(PrimaryColony);
      }
      colonies_.WriteTo(output, _repeated_colonies_codec);
      mineralFields_.WriteTo(output, _repeated_mineralFields_codec);
      vespeneGeysers_.WriteTo(output, _repeated_vespeneGeysers_codec);
      productionQueue_.WriteTo(output, _repeated_productionQueue_codec);
      squads_.WriteTo(output, _repeated_squads_codec);
      if (GameLoop != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(GameLoop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (map_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Map);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      if (common_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Common);
      }
      size += upgradesSelf_.CalculateSize(_repeated_upgradesSelf_codec);
      size += buildingsSelf_.CalculateSize(_repeated_buildingsSelf_codec);
      size += unitsSelf_.CalculateSize(_repeated_unitsSelf_codec);
      size += workersSelf_.CalculateSize(_repeated_workersSelf_codec);
      size += destructibles_.CalculateSize(_repeated_destructibles_codec);
      size += structuresEnemy_.CalculateSize(_repeated_structuresEnemy_codec);
      size += unitsEnemy_.CalculateSize(_repeated_unitsEnemy_codec);
      size += workersEnemy_.CalculateSize(_repeated_workersEnemy_codec);
      if (primaryColony_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PrimaryColony);
      }
      size += colonies_.CalculateSize(_repeated_colonies_codec);
      size += mineralFields_.CalculateSize(_repeated_mineralFields_codec);
      size += vespeneGeysers_.CalculateSize(_repeated_vespeneGeysers_codec);
      size += productionQueue_.CalculateSize(_repeated_productionQueue_codec);
      size += squads_.CalculateSize(_repeated_squads_codec);
      if (GameLoop != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GameLoop);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntelResponse other) {
      if (other == null) {
        return;
      }
      if (other.map_ != null) {
        if (map_ == null) {
          map_ = new global::NydusNetwork.API.Protocol.AbathurMap();
        }
        Map.MergeFrom(other.Map);
      }
      if (other.score_ != null) {
        if (score_ == null) {
          score_ = new global::NydusNetwork.API.Protocol.Score();
        }
        Score.MergeFrom(other.Score);
      }
      if (other.common_ != null) {
        if (common_ == null) {
          common_ = new global::NydusNetwork.API.Protocol.PlayerCommon();
        }
        Common.MergeFrom(other.Common);
      }
      upgradesSelf_.Add(other.upgradesSelf_);
      buildingsSelf_.Add(other.buildingsSelf_);
      unitsSelf_.Add(other.unitsSelf_);
      workersSelf_.Add(other.workersSelf_);
      destructibles_.Add(other.destructibles_);
      structuresEnemy_.Add(other.structuresEnemy_);
      unitsEnemy_.Add(other.unitsEnemy_);
      workersEnemy_.Add(other.workersEnemy_);
      if (other.primaryColony_ != null) {
        if (primaryColony_ == null) {
          primaryColony_ = new global::NydusNetwork.API.Protocol.ColonyData();
        }
        PrimaryColony.MergeFrom(other.PrimaryColony);
      }
      colonies_.Add(other.colonies_);
      mineralFields_.Add(other.mineralFields_);
      vespeneGeysers_.Add(other.vespeneGeysers_);
      productionQueue_.Add(other.productionQueue_);
      squads_.Add(other.squads_);
      if (other.GameLoop != 0) {
        GameLoop = other.GameLoop;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (map_ == null) {
              map_ = new global::NydusNetwork.API.Protocol.AbathurMap();
            }
            input.ReadMessage(map_);
            break;
          }
          case 18: {
            if (score_ == null) {
              score_ = new global::NydusNetwork.API.Protocol.Score();
            }
            input.ReadMessage(score_);
            break;
          }
          case 26: {
            if (common_ == null) {
              common_ = new global::NydusNetwork.API.Protocol.PlayerCommon();
            }
            input.ReadMessage(common_);
            break;
          }
          case 34: {
            upgradesSelf_.AddEntriesFrom(input, _repeated_upgradesSelf_codec);
            break;
          }
          case 42: {
            buildingsSelf_.AddEntriesFrom(input, _repeated_buildingsSelf_codec);
            break;
          }
          case 50: {
            unitsSelf_.AddEntriesFrom(input, _repeated_unitsSelf_codec);
            break;
          }
          case 58: {
            workersSelf_.AddEntriesFrom(input, _repeated_workersSelf_codec);
            break;
          }
          case 66: {
            destructibles_.AddEntriesFrom(input, _repeated_destructibles_codec);
            break;
          }
          case 74: {
            structuresEnemy_.AddEntriesFrom(input, _repeated_structuresEnemy_codec);
            break;
          }
          case 82: {
            unitsEnemy_.AddEntriesFrom(input, _repeated_unitsEnemy_codec);
            break;
          }
          case 90: {
            workersEnemy_.AddEntriesFrom(input, _repeated_workersEnemy_codec);
            break;
          }
          case 122: {
            if (primaryColony_ == null) {
              primaryColony_ = new global::NydusNetwork.API.Protocol.ColonyData();
            }
            input.ReadMessage(primaryColony_);
            break;
          }
          case 130: {
            colonies_.AddEntriesFrom(input, _repeated_colonies_codec);
            break;
          }
          case 138: {
            mineralFields_.AddEntriesFrom(input, _repeated_mineralFields_codec);
            break;
          }
          case 146: {
            vespeneGeysers_.AddEntriesFrom(input, _repeated_vespeneGeysers_codec);
            break;
          }
          case 154: {
            productionQueue_.AddEntriesFrom(input, _repeated_productionQueue_codec);
            break;
          }
          case 162: {
            squads_.AddEntriesFrom(input, _repeated_squads_codec);
            break;
          }
          case 168: {
            GameLoop = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProductionRequest : pb::IMessage<ProductionRequest> {
    private static readonly pb::MessageParser<ProductionRequest> _parser = new pb::MessageParser<ProductionRequest>(() => new ProductionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProductionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductionRequest(ProductionRequest other) : this() {
      switch (other.CallCase) {
        case CallOneofCase.ClearBuildOrder:
          ClearBuildOrder = other.ClearBuildOrder.Clone();
          break;
        case CallOneofCase.QueueUnit:
          QueueUnit = other.QueueUnit.Clone();
          break;
        case CallOneofCase.QueueTech:
          QueueTech = other.QueueTech.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProductionRequest Clone() {
      return new ProductionRequest(this);
    }

    /// <summary>Field number for the "clear_build_order" field.</summary>
    public const int ClearBuildOrderFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.ClearBuildOrder ClearBuildOrder {
      get { return callCase_ == CallOneofCase.ClearBuildOrder ? (global::NydusNetwork.API.Protocol.ClearBuildOrder) call_ : null; }
      set {
        call_ = value;
        callCase_ = value == null ? CallOneofCase.None : CallOneofCase.ClearBuildOrder;
      }
    }

    /// <summary>Field number for the "queue_unit" field.</summary>
    public const int QueueUnitFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.QueueUnit QueueUnit {
      get { return callCase_ == CallOneofCase.QueueUnit ? (global::NydusNetwork.API.Protocol.QueueUnit) call_ : null; }
      set {
        call_ = value;
        callCase_ = value == null ? CallOneofCase.None : CallOneofCase.QueueUnit;
      }
    }

    /// <summary>Field number for the "queue_tech" field.</summary>
    public const int QueueTechFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.QueueTech QueueTech {
      get { return callCase_ == CallOneofCase.QueueTech ? (global::NydusNetwork.API.Protocol.QueueTech) call_ : null; }
      set {
        call_ = value;
        callCase_ = value == null ? CallOneofCase.None : CallOneofCase.QueueTech;
      }
    }

    private object call_;
    /// <summary>Enum of possible cases for the "call" oneof.</summary>
    public enum CallOneofCase {
      None = 0,
      ClearBuildOrder = 1,
      QueueUnit = 2,
      QueueTech = 3,
    }
    private CallOneofCase callCase_ = CallOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CallOneofCase CallCase {
      get { return callCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCall() {
      callCase_ = CallOneofCase.None;
      call_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProductionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProductionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClearBuildOrder, other.ClearBuildOrder)) return false;
      if (!object.Equals(QueueUnit, other.QueueUnit)) return false;
      if (!object.Equals(QueueTech, other.QueueTech)) return false;
      if (CallCase != other.CallCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (callCase_ == CallOneofCase.ClearBuildOrder) hash ^= ClearBuildOrder.GetHashCode();
      if (callCase_ == CallOneofCase.QueueUnit) hash ^= QueueUnit.GetHashCode();
      if (callCase_ == CallOneofCase.QueueTech) hash ^= QueueTech.GetHashCode();
      hash ^= (int) callCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (callCase_ == CallOneofCase.ClearBuildOrder) {
        output.WriteRawTag(10);
        output.WriteMessage(ClearBuildOrder);
      }
      if (callCase_ == CallOneofCase.QueueUnit) {
        output.WriteRawTag(18);
        output.WriteMessage(QueueUnit);
      }
      if (callCase_ == CallOneofCase.QueueTech) {
        output.WriteRawTag(26);
        output.WriteMessage(QueueTech);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (callCase_ == CallOneofCase.ClearBuildOrder) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClearBuildOrder);
      }
      if (callCase_ == CallOneofCase.QueueUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueueUnit);
      }
      if (callCase_ == CallOneofCase.QueueTech) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(QueueTech);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProductionRequest other) {
      if (other == null) {
        return;
      }
      switch (other.CallCase) {
        case CallOneofCase.ClearBuildOrder:
          if (ClearBuildOrder == null) {
            ClearBuildOrder = new global::NydusNetwork.API.Protocol.ClearBuildOrder();
          }
          ClearBuildOrder.MergeFrom(other.ClearBuildOrder);
          break;
        case CallOneofCase.QueueUnit:
          if (QueueUnit == null) {
            QueueUnit = new global::NydusNetwork.API.Protocol.QueueUnit();
          }
          QueueUnit.MergeFrom(other.QueueUnit);
          break;
        case CallOneofCase.QueueTech:
          if (QueueTech == null) {
            QueueTech = new global::NydusNetwork.API.Protocol.QueueTech();
          }
          QueueTech.MergeFrom(other.QueueTech);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::NydusNetwork.API.Protocol.ClearBuildOrder subBuilder = new global::NydusNetwork.API.Protocol.ClearBuildOrder();
            if (callCase_ == CallOneofCase.ClearBuildOrder) {
              subBuilder.MergeFrom(ClearBuildOrder);
            }
            input.ReadMessage(subBuilder);
            ClearBuildOrder = subBuilder;
            break;
          }
          case 18: {
            global::NydusNetwork.API.Protocol.QueueUnit subBuilder = new global::NydusNetwork.API.Protocol.QueueUnit();
            if (callCase_ == CallOneofCase.QueueUnit) {
              subBuilder.MergeFrom(QueueUnit);
            }
            input.ReadMessage(subBuilder);
            QueueUnit = subBuilder;
            break;
          }
          case 26: {
            global::NydusNetwork.API.Protocol.QueueTech subBuilder = new global::NydusNetwork.API.Protocol.QueueTech();
            if (callCase_ == CallOneofCase.QueueTech) {
              subBuilder.MergeFrom(QueueTech);
            }
            input.ReadMessage(subBuilder);
            QueueTech = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClearBuildOrder : pb::IMessage<ClearBuildOrder> {
    private static readonly pb::MessageParser<ClearBuildOrder> _parser = new pb::MessageParser<ClearBuildOrder>(() => new ClearBuildOrder());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearBuildOrder> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBuildOrder() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBuildOrder(ClearBuildOrder other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBuildOrder Clone() {
      return new ClearBuildOrder(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearBuildOrder);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearBuildOrder other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearBuildOrder other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class QueueUnit : pb::IMessage<QueueUnit> {
    private static readonly pb::MessageParser<QueueUnit> _parser = new pb::MessageParser<QueueUnit>(() => new QueueUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueUnit(QueueUnit other) : this() {
      unitId_ = other.unitId_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
      spacing_ = other.spacing_;
      skippable_ = other.skippable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueUnit Clone() {
      return new QueueUnit(this);
    }

    /// <summary>Field number for the "unit_id" field.</summary>
    public const int UnitIdFieldNumber = 1;
    private uint unitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitId {
      get { return unitId_; }
      set {
        unitId_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "spacing" field.</summary>
    public const int SpacingFieldNumber = 3;
    private int spacing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Spacing {
      get { return spacing_; }
      set {
        spacing_ = value;
      }
    }

    /// <summary>Field number for the "skippable" field.</summary>
    public const int SkippableFieldNumber = 4;
    private bool skippable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skippable {
      get { return skippable_; }
      set {
        skippable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitId != other.UnitId) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      if (Spacing != other.Spacing) return false;
      if (Skippable != other.Skippable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitId != 0) hash ^= UnitId.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      if (Spacing != 0) hash ^= Spacing.GetHashCode();
      if (Skippable != false) hash ^= Skippable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UnitId);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (Spacing != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Spacing);
      }
      if (Skippable != false) {
        output.WriteRawTag(32);
        output.WriteBool(Skippable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitId);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (Spacing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Spacing);
      }
      if (Skippable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueUnit other) {
      if (other == null) {
        return;
      }
      if (other.UnitId != 0) {
        UnitId = other.UnitId;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Pos.MergeFrom(other.Pos);
      }
      if (other.Spacing != 0) {
        Spacing = other.Spacing;
      }
      if (other.Skippable != false) {
        Skippable = other.Skippable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 24: {
            Spacing = input.ReadInt32();
            break;
          }
          case 32: {
            Skippable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueueTech : pb::IMessage<QueueTech> {
    private static readonly pb::MessageParser<QueueTech> _parser = new pb::MessageParser<QueueTech>(() => new QueueTech());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueueTech> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueTech() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueTech(QueueTech other) : this() {
      upgradeId_ = other.upgradeId_;
      skippable_ = other.skippable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueueTech Clone() {
      return new QueueTech(this);
    }

    /// <summary>Field number for the "upgrade_id" field.</summary>
    public const int UpgradeIdFieldNumber = 1;
    private uint upgradeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UpgradeId {
      get { return upgradeId_; }
      set {
        upgradeId_ = value;
      }
    }

    /// <summary>Field number for the "skippable" field.</summary>
    public const int SkippableFieldNumber = 2;
    private bool skippable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Skippable {
      get { return skippable_; }
      set {
        skippable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueueTech);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueueTech other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpgradeId != other.UpgradeId) return false;
      if (Skippable != other.Skippable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpgradeId != 0) hash ^= UpgradeId.GetHashCode();
      if (Skippable != false) hash ^= Skippable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpgradeId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UpgradeId);
      }
      if (Skippable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Skippable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpgradeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpgradeId);
      }
      if (Skippable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueueTech other) {
      if (other == null) {
        return;
      }
      if (other.UpgradeId != 0) {
        UpgradeId = other.UpgradeId;
      }
      if (other.Skippable != false) {
        Skippable = other.Skippable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UpgradeId = input.ReadUInt32();
            break;
          }
          case 16: {
            Skippable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombatRequest : pb::IMessage<CombatRequest> {
    private static readonly pb::MessageParser<CombatRequest> _parser = new pb::MessageParser<CombatRequest>(() => new CombatRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombatRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRequest(CombatRequest other) : this() {
      switch (other.CommandCase) {
        case CommandOneofCase.MoveUnit:
          MoveUnit = other.MoveUnit.Clone();
          break;
        case CommandOneofCase.MoveSquad:
          MoveSquad = other.MoveSquad.Clone();
          break;
        case CommandOneofCase.AttackMoveUnit:
          AttackMoveUnit = other.AttackMoveUnit.Clone();
          break;
        case CommandOneofCase.AttackMoveSquad:
          AttackMoveSquad = other.AttackMoveSquad.Clone();
          break;
        case CommandOneofCase.AttackUnit:
          AttackUnit = other.AttackUnit.Clone();
          break;
        case CommandOneofCase.AttackSquad:
          AttackSquad = other.AttackSquad.Clone();
          break;
        case CommandOneofCase.UseTargetedAbilityUnit:
          UseTargetedAbilityUnit = other.UseTargetedAbilityUnit.Clone();
          break;
        case CommandOneofCase.UseTargetedAbilitySquad:
          UseTargetedAbilitySquad = other.UseTargetedAbilitySquad.Clone();
          break;
        case CommandOneofCase.UsePointCenteredAbilityUnit:
          UsePointCenteredAbilityUnit = other.UsePointCenteredAbilityUnit.Clone();
          break;
        case CommandOneofCase.UsePointCenteredAbilitySquad:
          UsePointCenteredAbilitySquad = other.UsePointCenteredAbilitySquad.Clone();
          break;
        case CommandOneofCase.UseTargetlessAbilityUnit:
          UseTargetlessAbilityUnit = other.UseTargetlessAbilityUnit.Clone();
          break;
        case CommandOneofCase.UseTargetlessAbilitySquad:
          UseTargetlessAbilitySquad = other.UseTargetlessAbilitySquad.Clone();
          break;
        case CommandOneofCase.SmartMoveUnit:
          SmartMoveUnit = other.SmartMoveUnit.Clone();
          break;
        case CommandOneofCase.SmartMoveSquad:
          SmartMoveSquad = other.SmartMoveSquad.Clone();
          break;
        case CommandOneofCase.SmartAttackMoveUnit:
          SmartAttackMoveUnit = other.SmartAttackMoveUnit.Clone();
          break;
        case CommandOneofCase.SmartAttackMoveSquad:
          SmartAttackMoveSquad = other.SmartAttackMoveSquad.Clone();
          break;
        case CommandOneofCase.SmartAttackUnit:
          SmartAttackUnit = other.SmartAttackUnit.Clone();
          break;
        case CommandOneofCase.SmartAttackSquad:
          SmartAttackSquad = other.SmartAttackSquad.Clone();
          break;
        case CommandOneofCase.SquadRequest:
          SquadRequest = other.SquadRequest.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombatRequest Clone() {
      return new CombatRequest(this);
    }

    /// <summary>Field number for the "move_unit" field.</summary>
    public const int MoveUnitFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.MoveUnit MoveUnit {
      get { return commandCase_ == CommandOneofCase.MoveUnit ? (global::NydusNetwork.API.Protocol.MoveUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MoveUnit;
      }
    }

    /// <summary>Field number for the "move_squad" field.</summary>
    public const int MoveSquadFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.MoveSquad MoveSquad {
      get { return commandCase_ == CommandOneofCase.MoveSquad ? (global::NydusNetwork.API.Protocol.MoveSquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.MoveSquad;
      }
    }

    /// <summary>Field number for the "attack_move_unit" field.</summary>
    public const int AttackMoveUnitFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.AttackMoveUnit AttackMoveUnit {
      get { return commandCase_ == CommandOneofCase.AttackMoveUnit ? (global::NydusNetwork.API.Protocol.AttackMoveUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AttackMoveUnit;
      }
    }

    /// <summary>Field number for the "attack_move_squad" field.</summary>
    public const int AttackMoveSquadFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.AttackMoveSquad AttackMoveSquad {
      get { return commandCase_ == CommandOneofCase.AttackMoveSquad ? (global::NydusNetwork.API.Protocol.AttackMoveSquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AttackMoveSquad;
      }
    }

    /// <summary>Field number for the "attack_unit" field.</summary>
    public const int AttackUnitFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.AttackUnit AttackUnit {
      get { return commandCase_ == CommandOneofCase.AttackUnit ? (global::NydusNetwork.API.Protocol.AttackUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AttackUnit;
      }
    }

    /// <summary>Field number for the "attack_squad" field.</summary>
    public const int AttackSquadFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.AttackSquad AttackSquad {
      get { return commandCase_ == CommandOneofCase.AttackSquad ? (global::NydusNetwork.API.Protocol.AttackSquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.AttackSquad;
      }
    }

    /// <summary>Field number for the "use_targeted_ability_unit" field.</summary>
    public const int UseTargetedAbilityUnitFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit UseTargetedAbilityUnit {
      get { return commandCase_ == CommandOneofCase.UseTargetedAbilityUnit ? (global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UseTargetedAbilityUnit;
      }
    }

    /// <summary>Field number for the "use_targeted_ability_squad" field.</summary>
    public const int UseTargetedAbilitySquadFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad UseTargetedAbilitySquad {
      get { return commandCase_ == CommandOneofCase.UseTargetedAbilitySquad ? (global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UseTargetedAbilitySquad;
      }
    }

    /// <summary>Field number for the "use_point_centered_ability_unit" field.</summary>
    public const int UsePointCenteredAbilityUnitFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit UsePointCenteredAbilityUnit {
      get { return commandCase_ == CommandOneofCase.UsePointCenteredAbilityUnit ? (global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UsePointCenteredAbilityUnit;
      }
    }

    /// <summary>Field number for the "use_point_centered_ability_squad" field.</summary>
    public const int UsePointCenteredAbilitySquadFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad UsePointCenteredAbilitySquad {
      get { return commandCase_ == CommandOneofCase.UsePointCenteredAbilitySquad ? (global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UsePointCenteredAbilitySquad;
      }
    }

    /// <summary>Field number for the "use_targetless_ability_unit" field.</summary>
    public const int UseTargetlessAbilityUnitFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit UseTargetlessAbilityUnit {
      get { return commandCase_ == CommandOneofCase.UseTargetlessAbilityUnit ? (global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UseTargetlessAbilityUnit;
      }
    }

    /// <summary>Field number for the "use_targetless_ability_squad" field.</summary>
    public const int UseTargetlessAbilitySquadFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad UseTargetlessAbilitySquad {
      get { return commandCase_ == CommandOneofCase.UseTargetlessAbilitySquad ? (global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.UseTargetlessAbilitySquad;
      }
    }

    /// <summary>Field number for the "smart_move_unit" field.</summary>
    public const int SmartMoveUnitFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SmartMoveUnit SmartMoveUnit {
      get { return commandCase_ == CommandOneofCase.SmartMoveUnit ? (global::NydusNetwork.API.Protocol.SmartMoveUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SmartMoveUnit;
      }
    }

    /// <summary>Field number for the "smart_move_squad" field.</summary>
    public const int SmartMoveSquadFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SmartMoveSquad SmartMoveSquad {
      get { return commandCase_ == CommandOneofCase.SmartMoveSquad ? (global::NydusNetwork.API.Protocol.SmartMoveSquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SmartMoveSquad;
      }
    }

    /// <summary>Field number for the "smart_attack_move_unit" field.</summary>
    public const int SmartAttackMoveUnitFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SmartAttackMoveUnit SmartAttackMoveUnit {
      get { return commandCase_ == CommandOneofCase.SmartAttackMoveUnit ? (global::NydusNetwork.API.Protocol.SmartAttackMoveUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SmartAttackMoveUnit;
      }
    }

    /// <summary>Field number for the "smart_attack_move_squad" field.</summary>
    public const int SmartAttackMoveSquadFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SmartAttackMoveSquad SmartAttackMoveSquad {
      get { return commandCase_ == CommandOneofCase.SmartAttackMoveSquad ? (global::NydusNetwork.API.Protocol.SmartAttackMoveSquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SmartAttackMoveSquad;
      }
    }

    /// <summary>Field number for the "smart_attack_unit" field.</summary>
    public const int SmartAttackUnitFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SmartAttackUnit SmartAttackUnit {
      get { return commandCase_ == CommandOneofCase.SmartAttackUnit ? (global::NydusNetwork.API.Protocol.SmartAttackUnit) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SmartAttackUnit;
      }
    }

    /// <summary>Field number for the "smart_attack_squad" field.</summary>
    public const int SmartAttackSquadFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SmartAttackSquad SmartAttackSquad {
      get { return commandCase_ == CommandOneofCase.SmartAttackSquad ? (global::NydusNetwork.API.Protocol.SmartAttackSquad) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SmartAttackSquad;
      }
    }

    /// <summary>Field number for the "squad_request" field.</summary>
    public const int SquadRequestFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SquadRequest SquadRequest {
      get { return commandCase_ == CommandOneofCase.SquadRequest ? (global::NydusNetwork.API.Protocol.SquadRequest) command_ : null; }
      set {
        command_ = value;
        commandCase_ = value == null ? CommandOneofCase.None : CommandOneofCase.SquadRequest;
      }
    }

    private object command_;
    /// <summary>Enum of possible cases for the "command" oneof.</summary>
    public enum CommandOneofCase {
      None = 0,
      MoveUnit = 1,
      MoveSquad = 2,
      AttackMoveUnit = 3,
      AttackMoveSquad = 4,
      AttackUnit = 5,
      AttackSquad = 6,
      UseTargetedAbilityUnit = 7,
      UseTargetedAbilitySquad = 8,
      UsePointCenteredAbilityUnit = 9,
      UsePointCenteredAbilitySquad = 10,
      UseTargetlessAbilityUnit = 11,
      UseTargetlessAbilitySquad = 12,
      SmartMoveUnit = 13,
      SmartMoveSquad = 14,
      SmartAttackMoveUnit = 15,
      SmartAttackMoveSquad = 16,
      SmartAttackUnit = 17,
      SmartAttackSquad = 18,
      SquadRequest = 19,
    }
    private CommandOneofCase commandCase_ = CommandOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandOneofCase CommandCase {
      get { return commandCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCommand() {
      commandCase_ = CommandOneofCase.None;
      command_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombatRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombatRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MoveUnit, other.MoveUnit)) return false;
      if (!object.Equals(MoveSquad, other.MoveSquad)) return false;
      if (!object.Equals(AttackMoveUnit, other.AttackMoveUnit)) return false;
      if (!object.Equals(AttackMoveSquad, other.AttackMoveSquad)) return false;
      if (!object.Equals(AttackUnit, other.AttackUnit)) return false;
      if (!object.Equals(AttackSquad, other.AttackSquad)) return false;
      if (!object.Equals(UseTargetedAbilityUnit, other.UseTargetedAbilityUnit)) return false;
      if (!object.Equals(UseTargetedAbilitySquad, other.UseTargetedAbilitySquad)) return false;
      if (!object.Equals(UsePointCenteredAbilityUnit, other.UsePointCenteredAbilityUnit)) return false;
      if (!object.Equals(UsePointCenteredAbilitySquad, other.UsePointCenteredAbilitySquad)) return false;
      if (!object.Equals(UseTargetlessAbilityUnit, other.UseTargetlessAbilityUnit)) return false;
      if (!object.Equals(UseTargetlessAbilitySquad, other.UseTargetlessAbilitySquad)) return false;
      if (!object.Equals(SmartMoveUnit, other.SmartMoveUnit)) return false;
      if (!object.Equals(SmartMoveSquad, other.SmartMoveSquad)) return false;
      if (!object.Equals(SmartAttackMoveUnit, other.SmartAttackMoveUnit)) return false;
      if (!object.Equals(SmartAttackMoveSquad, other.SmartAttackMoveSquad)) return false;
      if (!object.Equals(SmartAttackUnit, other.SmartAttackUnit)) return false;
      if (!object.Equals(SmartAttackSquad, other.SmartAttackSquad)) return false;
      if (!object.Equals(SquadRequest, other.SquadRequest)) return false;
      if (CommandCase != other.CommandCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (commandCase_ == CommandOneofCase.MoveUnit) hash ^= MoveUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.MoveSquad) hash ^= MoveSquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.AttackMoveUnit) hash ^= AttackMoveUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.AttackMoveSquad) hash ^= AttackMoveSquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.AttackUnit) hash ^= AttackUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.AttackSquad) hash ^= AttackSquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.UseTargetedAbilityUnit) hash ^= UseTargetedAbilityUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.UseTargetedAbilitySquad) hash ^= UseTargetedAbilitySquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.UsePointCenteredAbilityUnit) hash ^= UsePointCenteredAbilityUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.UsePointCenteredAbilitySquad) hash ^= UsePointCenteredAbilitySquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.UseTargetlessAbilityUnit) hash ^= UseTargetlessAbilityUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.UseTargetlessAbilitySquad) hash ^= UseTargetlessAbilitySquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.SmartMoveUnit) hash ^= SmartMoveUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.SmartMoveSquad) hash ^= SmartMoveSquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.SmartAttackMoveUnit) hash ^= SmartAttackMoveUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.SmartAttackMoveSquad) hash ^= SmartAttackMoveSquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.SmartAttackUnit) hash ^= SmartAttackUnit.GetHashCode();
      if (commandCase_ == CommandOneofCase.SmartAttackSquad) hash ^= SmartAttackSquad.GetHashCode();
      if (commandCase_ == CommandOneofCase.SquadRequest) hash ^= SquadRequest.GetHashCode();
      hash ^= (int) commandCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (commandCase_ == CommandOneofCase.MoveUnit) {
        output.WriteRawTag(10);
        output.WriteMessage(MoveUnit);
      }
      if (commandCase_ == CommandOneofCase.MoveSquad) {
        output.WriteRawTag(18);
        output.WriteMessage(MoveSquad);
      }
      if (commandCase_ == CommandOneofCase.AttackMoveUnit) {
        output.WriteRawTag(26);
        output.WriteMessage(AttackMoveUnit);
      }
      if (commandCase_ == CommandOneofCase.AttackMoveSquad) {
        output.WriteRawTag(34);
        output.WriteMessage(AttackMoveSquad);
      }
      if (commandCase_ == CommandOneofCase.AttackUnit) {
        output.WriteRawTag(42);
        output.WriteMessage(AttackUnit);
      }
      if (commandCase_ == CommandOneofCase.AttackSquad) {
        output.WriteRawTag(50);
        output.WriteMessage(AttackSquad);
      }
      if (commandCase_ == CommandOneofCase.UseTargetedAbilityUnit) {
        output.WriteRawTag(58);
        output.WriteMessage(UseTargetedAbilityUnit);
      }
      if (commandCase_ == CommandOneofCase.UseTargetedAbilitySquad) {
        output.WriteRawTag(66);
        output.WriteMessage(UseTargetedAbilitySquad);
      }
      if (commandCase_ == CommandOneofCase.UsePointCenteredAbilityUnit) {
        output.WriteRawTag(74);
        output.WriteMessage(UsePointCenteredAbilityUnit);
      }
      if (commandCase_ == CommandOneofCase.UsePointCenteredAbilitySquad) {
        output.WriteRawTag(82);
        output.WriteMessage(UsePointCenteredAbilitySquad);
      }
      if (commandCase_ == CommandOneofCase.UseTargetlessAbilityUnit) {
        output.WriteRawTag(90);
        output.WriteMessage(UseTargetlessAbilityUnit);
      }
      if (commandCase_ == CommandOneofCase.UseTargetlessAbilitySquad) {
        output.WriteRawTag(98);
        output.WriteMessage(UseTargetlessAbilitySquad);
      }
      if (commandCase_ == CommandOneofCase.SmartMoveUnit) {
        output.WriteRawTag(106);
        output.WriteMessage(SmartMoveUnit);
      }
      if (commandCase_ == CommandOneofCase.SmartMoveSquad) {
        output.WriteRawTag(114);
        output.WriteMessage(SmartMoveSquad);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackMoveUnit) {
        output.WriteRawTag(122);
        output.WriteMessage(SmartAttackMoveUnit);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackMoveSquad) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(SmartAttackMoveSquad);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackUnit) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(SmartAttackUnit);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackSquad) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(SmartAttackSquad);
      }
      if (commandCase_ == CommandOneofCase.SquadRequest) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(SquadRequest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (commandCase_ == CommandOneofCase.MoveUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveUnit);
      }
      if (commandCase_ == CommandOneofCase.MoveSquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveSquad);
      }
      if (commandCase_ == CommandOneofCase.AttackMoveUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackMoveUnit);
      }
      if (commandCase_ == CommandOneofCase.AttackMoveSquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackMoveSquad);
      }
      if (commandCase_ == CommandOneofCase.AttackUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackUnit);
      }
      if (commandCase_ == CommandOneofCase.AttackSquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AttackSquad);
      }
      if (commandCase_ == CommandOneofCase.UseTargetedAbilityUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseTargetedAbilityUnit);
      }
      if (commandCase_ == CommandOneofCase.UseTargetedAbilitySquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseTargetedAbilitySquad);
      }
      if (commandCase_ == CommandOneofCase.UsePointCenteredAbilityUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UsePointCenteredAbilityUnit);
      }
      if (commandCase_ == CommandOneofCase.UsePointCenteredAbilitySquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UsePointCenteredAbilitySquad);
      }
      if (commandCase_ == CommandOneofCase.UseTargetlessAbilityUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseTargetlessAbilityUnit);
      }
      if (commandCase_ == CommandOneofCase.UseTargetlessAbilitySquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseTargetlessAbilitySquad);
      }
      if (commandCase_ == CommandOneofCase.SmartMoveUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmartMoveUnit);
      }
      if (commandCase_ == CommandOneofCase.SmartMoveSquad) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmartMoveSquad);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackMoveUnit) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmartAttackMoveUnit);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackMoveSquad) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SmartAttackMoveSquad);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackUnit) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SmartAttackUnit);
      }
      if (commandCase_ == CommandOneofCase.SmartAttackSquad) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SmartAttackSquad);
      }
      if (commandCase_ == CommandOneofCase.SquadRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SquadRequest);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombatRequest other) {
      if (other == null) {
        return;
      }
      switch (other.CommandCase) {
        case CommandOneofCase.MoveUnit:
          if (MoveUnit == null) {
            MoveUnit = new global::NydusNetwork.API.Protocol.MoveUnit();
          }
          MoveUnit.MergeFrom(other.MoveUnit);
          break;
        case CommandOneofCase.MoveSquad:
          if (MoveSquad == null) {
            MoveSquad = new global::NydusNetwork.API.Protocol.MoveSquad();
          }
          MoveSquad.MergeFrom(other.MoveSquad);
          break;
        case CommandOneofCase.AttackMoveUnit:
          if (AttackMoveUnit == null) {
            AttackMoveUnit = new global::NydusNetwork.API.Protocol.AttackMoveUnit();
          }
          AttackMoveUnit.MergeFrom(other.AttackMoveUnit);
          break;
        case CommandOneofCase.AttackMoveSquad:
          if (AttackMoveSquad == null) {
            AttackMoveSquad = new global::NydusNetwork.API.Protocol.AttackMoveSquad();
          }
          AttackMoveSquad.MergeFrom(other.AttackMoveSquad);
          break;
        case CommandOneofCase.AttackUnit:
          if (AttackUnit == null) {
            AttackUnit = new global::NydusNetwork.API.Protocol.AttackUnit();
          }
          AttackUnit.MergeFrom(other.AttackUnit);
          break;
        case CommandOneofCase.AttackSquad:
          if (AttackSquad == null) {
            AttackSquad = new global::NydusNetwork.API.Protocol.AttackSquad();
          }
          AttackSquad.MergeFrom(other.AttackSquad);
          break;
        case CommandOneofCase.UseTargetedAbilityUnit:
          if (UseTargetedAbilityUnit == null) {
            UseTargetedAbilityUnit = new global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit();
          }
          UseTargetedAbilityUnit.MergeFrom(other.UseTargetedAbilityUnit);
          break;
        case CommandOneofCase.UseTargetedAbilitySquad:
          if (UseTargetedAbilitySquad == null) {
            UseTargetedAbilitySquad = new global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad();
          }
          UseTargetedAbilitySquad.MergeFrom(other.UseTargetedAbilitySquad);
          break;
        case CommandOneofCase.UsePointCenteredAbilityUnit:
          if (UsePointCenteredAbilityUnit == null) {
            UsePointCenteredAbilityUnit = new global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit();
          }
          UsePointCenteredAbilityUnit.MergeFrom(other.UsePointCenteredAbilityUnit);
          break;
        case CommandOneofCase.UsePointCenteredAbilitySquad:
          if (UsePointCenteredAbilitySquad == null) {
            UsePointCenteredAbilitySquad = new global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad();
          }
          UsePointCenteredAbilitySquad.MergeFrom(other.UsePointCenteredAbilitySquad);
          break;
        case CommandOneofCase.UseTargetlessAbilityUnit:
          if (UseTargetlessAbilityUnit == null) {
            UseTargetlessAbilityUnit = new global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit();
          }
          UseTargetlessAbilityUnit.MergeFrom(other.UseTargetlessAbilityUnit);
          break;
        case CommandOneofCase.UseTargetlessAbilitySquad:
          if (UseTargetlessAbilitySquad == null) {
            UseTargetlessAbilitySquad = new global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad();
          }
          UseTargetlessAbilitySquad.MergeFrom(other.UseTargetlessAbilitySquad);
          break;
        case CommandOneofCase.SmartMoveUnit:
          if (SmartMoveUnit == null) {
            SmartMoveUnit = new global::NydusNetwork.API.Protocol.SmartMoveUnit();
          }
          SmartMoveUnit.MergeFrom(other.SmartMoveUnit);
          break;
        case CommandOneofCase.SmartMoveSquad:
          if (SmartMoveSquad == null) {
            SmartMoveSquad = new global::NydusNetwork.API.Protocol.SmartMoveSquad();
          }
          SmartMoveSquad.MergeFrom(other.SmartMoveSquad);
          break;
        case CommandOneofCase.SmartAttackMoveUnit:
          if (SmartAttackMoveUnit == null) {
            SmartAttackMoveUnit = new global::NydusNetwork.API.Protocol.SmartAttackMoveUnit();
          }
          SmartAttackMoveUnit.MergeFrom(other.SmartAttackMoveUnit);
          break;
        case CommandOneofCase.SmartAttackMoveSquad:
          if (SmartAttackMoveSquad == null) {
            SmartAttackMoveSquad = new global::NydusNetwork.API.Protocol.SmartAttackMoveSquad();
          }
          SmartAttackMoveSquad.MergeFrom(other.SmartAttackMoveSquad);
          break;
        case CommandOneofCase.SmartAttackUnit:
          if (SmartAttackUnit == null) {
            SmartAttackUnit = new global::NydusNetwork.API.Protocol.SmartAttackUnit();
          }
          SmartAttackUnit.MergeFrom(other.SmartAttackUnit);
          break;
        case CommandOneofCase.SmartAttackSquad:
          if (SmartAttackSquad == null) {
            SmartAttackSquad = new global::NydusNetwork.API.Protocol.SmartAttackSquad();
          }
          SmartAttackSquad.MergeFrom(other.SmartAttackSquad);
          break;
        case CommandOneofCase.SquadRequest:
          if (SquadRequest == null) {
            SquadRequest = new global::NydusNetwork.API.Protocol.SquadRequest();
          }
          SquadRequest.MergeFrom(other.SquadRequest);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::NydusNetwork.API.Protocol.MoveUnit subBuilder = new global::NydusNetwork.API.Protocol.MoveUnit();
            if (commandCase_ == CommandOneofCase.MoveUnit) {
              subBuilder.MergeFrom(MoveUnit);
            }
            input.ReadMessage(subBuilder);
            MoveUnit = subBuilder;
            break;
          }
          case 18: {
            global::NydusNetwork.API.Protocol.MoveSquad subBuilder = new global::NydusNetwork.API.Protocol.MoveSquad();
            if (commandCase_ == CommandOneofCase.MoveSquad) {
              subBuilder.MergeFrom(MoveSquad);
            }
            input.ReadMessage(subBuilder);
            MoveSquad = subBuilder;
            break;
          }
          case 26: {
            global::NydusNetwork.API.Protocol.AttackMoveUnit subBuilder = new global::NydusNetwork.API.Protocol.AttackMoveUnit();
            if (commandCase_ == CommandOneofCase.AttackMoveUnit) {
              subBuilder.MergeFrom(AttackMoveUnit);
            }
            input.ReadMessage(subBuilder);
            AttackMoveUnit = subBuilder;
            break;
          }
          case 34: {
            global::NydusNetwork.API.Protocol.AttackMoveSquad subBuilder = new global::NydusNetwork.API.Protocol.AttackMoveSquad();
            if (commandCase_ == CommandOneofCase.AttackMoveSquad) {
              subBuilder.MergeFrom(AttackMoveSquad);
            }
            input.ReadMessage(subBuilder);
            AttackMoveSquad = subBuilder;
            break;
          }
          case 42: {
            global::NydusNetwork.API.Protocol.AttackUnit subBuilder = new global::NydusNetwork.API.Protocol.AttackUnit();
            if (commandCase_ == CommandOneofCase.AttackUnit) {
              subBuilder.MergeFrom(AttackUnit);
            }
            input.ReadMessage(subBuilder);
            AttackUnit = subBuilder;
            break;
          }
          case 50: {
            global::NydusNetwork.API.Protocol.AttackSquad subBuilder = new global::NydusNetwork.API.Protocol.AttackSquad();
            if (commandCase_ == CommandOneofCase.AttackSquad) {
              subBuilder.MergeFrom(AttackSquad);
            }
            input.ReadMessage(subBuilder);
            AttackSquad = subBuilder;
            break;
          }
          case 58: {
            global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit subBuilder = new global::NydusNetwork.API.Protocol.UseTargetedAbilityUnit();
            if (commandCase_ == CommandOneofCase.UseTargetedAbilityUnit) {
              subBuilder.MergeFrom(UseTargetedAbilityUnit);
            }
            input.ReadMessage(subBuilder);
            UseTargetedAbilityUnit = subBuilder;
            break;
          }
          case 66: {
            global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad subBuilder = new global::NydusNetwork.API.Protocol.UseTargetedAbilitySquad();
            if (commandCase_ == CommandOneofCase.UseTargetedAbilitySquad) {
              subBuilder.MergeFrom(UseTargetedAbilitySquad);
            }
            input.ReadMessage(subBuilder);
            UseTargetedAbilitySquad = subBuilder;
            break;
          }
          case 74: {
            global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit subBuilder = new global::NydusNetwork.API.Protocol.UsePointCenteredAbilityUnit();
            if (commandCase_ == CommandOneofCase.UsePointCenteredAbilityUnit) {
              subBuilder.MergeFrom(UsePointCenteredAbilityUnit);
            }
            input.ReadMessage(subBuilder);
            UsePointCenteredAbilityUnit = subBuilder;
            break;
          }
          case 82: {
            global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad subBuilder = new global::NydusNetwork.API.Protocol.UsePointCenteredAbilitySquad();
            if (commandCase_ == CommandOneofCase.UsePointCenteredAbilitySquad) {
              subBuilder.MergeFrom(UsePointCenteredAbilitySquad);
            }
            input.ReadMessage(subBuilder);
            UsePointCenteredAbilitySquad = subBuilder;
            break;
          }
          case 90: {
            global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit subBuilder = new global::NydusNetwork.API.Protocol.UseTargetlessAbilityUnit();
            if (commandCase_ == CommandOneofCase.UseTargetlessAbilityUnit) {
              subBuilder.MergeFrom(UseTargetlessAbilityUnit);
            }
            input.ReadMessage(subBuilder);
            UseTargetlessAbilityUnit = subBuilder;
            break;
          }
          case 98: {
            global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad subBuilder = new global::NydusNetwork.API.Protocol.UseTargetlessAbilitySquad();
            if (commandCase_ == CommandOneofCase.UseTargetlessAbilitySquad) {
              subBuilder.MergeFrom(UseTargetlessAbilitySquad);
            }
            input.ReadMessage(subBuilder);
            UseTargetlessAbilitySquad = subBuilder;
            break;
          }
          case 106: {
            global::NydusNetwork.API.Protocol.SmartMoveUnit subBuilder = new global::NydusNetwork.API.Protocol.SmartMoveUnit();
            if (commandCase_ == CommandOneofCase.SmartMoveUnit) {
              subBuilder.MergeFrom(SmartMoveUnit);
            }
            input.ReadMessage(subBuilder);
            SmartMoveUnit = subBuilder;
            break;
          }
          case 114: {
            global::NydusNetwork.API.Protocol.SmartMoveSquad subBuilder = new global::NydusNetwork.API.Protocol.SmartMoveSquad();
            if (commandCase_ == CommandOneofCase.SmartMoveSquad) {
              subBuilder.MergeFrom(SmartMoveSquad);
            }
            input.ReadMessage(subBuilder);
            SmartMoveSquad = subBuilder;
            break;
          }
          case 122: {
            global::NydusNetwork.API.Protocol.SmartAttackMoveUnit subBuilder = new global::NydusNetwork.API.Protocol.SmartAttackMoveUnit();
            if (commandCase_ == CommandOneofCase.SmartAttackMoveUnit) {
              subBuilder.MergeFrom(SmartAttackMoveUnit);
            }
            input.ReadMessage(subBuilder);
            SmartAttackMoveUnit = subBuilder;
            break;
          }
          case 130: {
            global::NydusNetwork.API.Protocol.SmartAttackMoveSquad subBuilder = new global::NydusNetwork.API.Protocol.SmartAttackMoveSquad();
            if (commandCase_ == CommandOneofCase.SmartAttackMoveSquad) {
              subBuilder.MergeFrom(SmartAttackMoveSquad);
            }
            input.ReadMessage(subBuilder);
            SmartAttackMoveSquad = subBuilder;
            break;
          }
          case 138: {
            global::NydusNetwork.API.Protocol.SmartAttackUnit subBuilder = new global::NydusNetwork.API.Protocol.SmartAttackUnit();
            if (commandCase_ == CommandOneofCase.SmartAttackUnit) {
              subBuilder.MergeFrom(SmartAttackUnit);
            }
            input.ReadMessage(subBuilder);
            SmartAttackUnit = subBuilder;
            break;
          }
          case 146: {
            global::NydusNetwork.API.Protocol.SmartAttackSquad subBuilder = new global::NydusNetwork.API.Protocol.SmartAttackSquad();
            if (commandCase_ == CommandOneofCase.SmartAttackSquad) {
              subBuilder.MergeFrom(SmartAttackSquad);
            }
            input.ReadMessage(subBuilder);
            SmartAttackSquad = subBuilder;
            break;
          }
          case 154: {
            global::NydusNetwork.API.Protocol.SquadRequest subBuilder = new global::NydusNetwork.API.Protocol.SquadRequest();
            if (commandCase_ == CommandOneofCase.SquadRequest) {
              subBuilder.MergeFrom(SquadRequest);
            }
            input.ReadMessage(subBuilder);
            SquadRequest = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveUnit : pb::IMessage<MoveUnit> {
    private static readonly pb::MessageParser<MoveUnit> _parser = new pb::MessageParser<MoveUnit>(() => new MoveUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveUnit(MoveUnit other) : this() {
      unitTag_ = other.unitTag_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveUnit Clone() {
      return new MoveUnit(this);
    }

    /// <summary>Field number for the "unit_tag" field.</summary>
    public const int UnitTagFieldNumber = 1;
    private ulong unitTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnitTag {
      get { return unitTag_; }
      set {
        unitTag_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitTag != other.UnitTag) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitTag != 0UL) hash ^= UnitTag.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitTag != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UnitTag);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitTag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveUnit other) {
      if (other == null) {
        return;
      }
      if (other.UnitTag != 0UL) {
        UnitTag = other.UnitTag;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitTag = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveSquad : pb::IMessage<MoveSquad> {
    private static readonly pb::MessageParser<MoveSquad> _parser = new pb::MessageParser<MoveSquad>(() => new MoveSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSquad(MoveSquad other) : this() {
      squad_ = other.squad_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSquad Clone() {
      return new MoveSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squad != other.Squad) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squad != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Squad);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveSquad other) {
      if (other == null) {
        return;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Squad = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackMoveUnit : pb::IMessage<AttackMoveUnit> {
    private static readonly pb::MessageParser<AttackMoveUnit> _parser = new pb::MessageParser<AttackMoveUnit>(() => new AttackMoveUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackMoveUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackMoveUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackMoveUnit(AttackMoveUnit other) : this() {
      unitTag_ = other.unitTag_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackMoveUnit Clone() {
      return new AttackMoveUnit(this);
    }

    /// <summary>Field number for the "unit_tag" field.</summary>
    public const int UnitTagFieldNumber = 1;
    private ulong unitTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnitTag {
      get { return unitTag_; }
      set {
        unitTag_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackMoveUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackMoveUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitTag != other.UnitTag) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitTag != 0UL) hash ^= UnitTag.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitTag != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UnitTag);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitTag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackMoveUnit other) {
      if (other == null) {
        return;
      }
      if (other.UnitTag != 0UL) {
        UnitTag = other.UnitTag;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitTag = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackMoveSquad : pb::IMessage<AttackMoveSquad> {
    private static readonly pb::MessageParser<AttackMoveSquad> _parser = new pb::MessageParser<AttackMoveSquad>(() => new AttackMoveSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackMoveSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackMoveSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackMoveSquad(AttackMoveSquad other) : this() {
      squad_ = other.squad_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackMoveSquad Clone() {
      return new AttackMoveSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackMoveSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackMoveSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squad != other.Squad) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squad != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Squad);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackMoveSquad other) {
      if (other == null) {
        return;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Squad = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackUnit : pb::IMessage<AttackUnit> {
    private static readonly pb::MessageParser<AttackUnit> _parser = new pb::MessageParser<AttackUnit>(() => new AttackUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackUnit(AttackUnit other) : this() {
      sourceUnit_ = other.sourceUnit_;
      targetUnit_ = other.targetUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackUnit Clone() {
      return new AttackUnit(this);
    }

    /// <summary>Field number for the "source_unit" field.</summary>
    public const int SourceUnitFieldNumber = 1;
    private ulong sourceUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceUnit {
      get { return sourceUnit_; }
      set {
        sourceUnit_ = value;
      }
    }

    /// <summary>Field number for the "target_unit" field.</summary>
    public const int TargetUnitFieldNumber = 2;
    private ulong targetUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnit {
      get { return targetUnit_; }
      set {
        targetUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUnit != other.SourceUnit) return false;
      if (TargetUnit != other.TargetUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUnit != 0UL) hash ^= SourceUnit.GetHashCode();
      if (TargetUnit != 0UL) hash ^= TargetUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceUnit != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SourceUnit);
      }
      if (TargetUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceUnit);
      }
      if (TargetUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackUnit other) {
      if (other == null) {
        return;
      }
      if (other.SourceUnit != 0UL) {
        SourceUnit = other.SourceUnit;
      }
      if (other.TargetUnit != 0UL) {
        TargetUnit = other.TargetUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUnit = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetUnit = input.ReadUInt64();
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackSquad : pb::IMessage<AttackSquad> {
    private static readonly pb::MessageParser<AttackSquad> _parser = new pb::MessageParser<AttackSquad>(() => new AttackSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackSquad(AttackSquad other) : this() {
      squad_ = other.squad_;
      targetUnit_ = other.targetUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackSquad Clone() {
      return new AttackSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "target_unit" field.</summary>
    public const int TargetUnitFieldNumber = 2;
    private ulong targetUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnit {
      get { return targetUnit_; }
      set {
        targetUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squad != other.Squad) return false;
      if (TargetUnit != other.TargetUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (TargetUnit != 0UL) hash ^= TargetUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squad != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Squad);
      }
      if (TargetUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (TargetUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackSquad other) {
      if (other == null) {
        return;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.TargetUnit != 0UL) {
        TargetUnit = other.TargetUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Squad = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetUnit = input.ReadUInt64();
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseTargetedAbilityUnit : pb::IMessage<UseTargetedAbilityUnit> {
    private static readonly pb::MessageParser<UseTargetedAbilityUnit> _parser = new pb::MessageParser<UseTargetedAbilityUnit>(() => new UseTargetedAbilityUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseTargetedAbilityUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetedAbilityUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetedAbilityUnit(UseTargetedAbilityUnit other) : this() {
      abilityId_ = other.abilityId_;
      sourceUnit_ = other.sourceUnit_;
      targetUnit_ = other.targetUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetedAbilityUnit Clone() {
      return new UseTargetedAbilityUnit(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "source_unit" field.</summary>
    public const int SourceUnitFieldNumber = 2;
    private ulong sourceUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceUnit {
      get { return sourceUnit_; }
      set {
        sourceUnit_ = value;
      }
    }

    /// <summary>Field number for the "target_unit" field.</summary>
    public const int TargetUnitFieldNumber = 3;
    private ulong targetUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnit {
      get { return targetUnit_; }
      set {
        targetUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 4;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseTargetedAbilityUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseTargetedAbilityUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (SourceUnit != other.SourceUnit) return false;
      if (TargetUnit != other.TargetUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (SourceUnit != 0UL) hash ^= SourceUnit.GetHashCode();
      if (TargetUnit != 0UL) hash ^= TargetUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (SourceUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SourceUnit);
      }
      if (TargetUnit != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(32);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (SourceUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceUnit);
      }
      if (TargetUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseTargetedAbilityUnit other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.SourceUnit != 0UL) {
        SourceUnit = other.SourceUnit;
      }
      if (other.TargetUnit != 0UL) {
        TargetUnit = other.TargetUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUnit = input.ReadUInt64();
            break;
          }
          case 24: {
            TargetUnit = input.ReadUInt64();
            break;
          }
          case 32: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseTargetedAbilitySquad : pb::IMessage<UseTargetedAbilitySquad> {
    private static readonly pb::MessageParser<UseTargetedAbilitySquad> _parser = new pb::MessageParser<UseTargetedAbilitySquad>(() => new UseTargetedAbilitySquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseTargetedAbilitySquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetedAbilitySquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetedAbilitySquad(UseTargetedAbilitySquad other) : this() {
      abilityId_ = other.abilityId_;
      squad_ = other.squad_;
      targetUnit_ = other.targetUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetedAbilitySquad Clone() {
      return new UseTargetedAbilitySquad(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 2;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "target_unit" field.</summary>
    public const int TargetUnitFieldNumber = 3;
    private ulong targetUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnit {
      get { return targetUnit_; }
      set {
        targetUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 4;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseTargetedAbilitySquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseTargetedAbilitySquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (Squad != other.Squad) return false;
      if (TargetUnit != other.TargetUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (TargetUnit != 0UL) hash ^= TargetUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (Squad != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Squad);
      }
      if (TargetUnit != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TargetUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(32);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (TargetUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseTargetedAbilitySquad other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.TargetUnit != 0UL) {
        TargetUnit = other.TargetUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            Squad = input.ReadUInt64();
            break;
          }
          case 24: {
            TargetUnit = input.ReadUInt64();
            break;
          }
          case 32: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UsePointCenteredAbilityUnit : pb::IMessage<UsePointCenteredAbilityUnit> {
    private static readonly pb::MessageParser<UsePointCenteredAbilityUnit> _parser = new pb::MessageParser<UsePointCenteredAbilityUnit>(() => new UsePointCenteredAbilityUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePointCenteredAbilityUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointCenteredAbilityUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointCenteredAbilityUnit(UsePointCenteredAbilityUnit other) : this() {
      abilityId_ = other.abilityId_;
      sourceUnit_ = other.sourceUnit_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointCenteredAbilityUnit Clone() {
      return new UsePointCenteredAbilityUnit(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "source_unit" field.</summary>
    public const int SourceUnitFieldNumber = 2;
    private ulong sourceUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceUnit {
      get { return sourceUnit_; }
      set {
        sourceUnit_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 4;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePointCenteredAbilityUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePointCenteredAbilityUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (SourceUnit != other.SourceUnit) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (SourceUnit != 0UL) hash ^= SourceUnit.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (SourceUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SourceUnit);
      }
      if (point_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(32);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (SourceUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceUnit);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePointCenteredAbilityUnit other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.SourceUnit != 0UL) {
        SourceUnit = other.SourceUnit;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUnit = input.ReadUInt64();
            break;
          }
          case 26: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 32: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UsePointCenteredAbilitySquad : pb::IMessage<UsePointCenteredAbilitySquad> {
    private static readonly pb::MessageParser<UsePointCenteredAbilitySquad> _parser = new pb::MessageParser<UsePointCenteredAbilitySquad>(() => new UsePointCenteredAbilitySquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UsePointCenteredAbilitySquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointCenteredAbilitySquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointCenteredAbilitySquad(UsePointCenteredAbilitySquad other) : this() {
      abilityId_ = other.abilityId_;
      squad_ = other.squad_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UsePointCenteredAbilitySquad Clone() {
      return new UsePointCenteredAbilitySquad(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 2;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 3;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 4;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UsePointCenteredAbilitySquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UsePointCenteredAbilitySquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (Squad != other.Squad) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (Squad != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Squad);
      }
      if (point_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(32);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UsePointCenteredAbilitySquad other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            Squad = input.ReadUInt64();
            break;
          }
          case 26: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 32: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseTargetlessAbilityUnit : pb::IMessage<UseTargetlessAbilityUnit> {
    private static readonly pb::MessageParser<UseTargetlessAbilityUnit> _parser = new pb::MessageParser<UseTargetlessAbilityUnit>(() => new UseTargetlessAbilityUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseTargetlessAbilityUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetlessAbilityUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetlessAbilityUnit(UseTargetlessAbilityUnit other) : this() {
      abilityId_ = other.abilityId_;
      sourceUnit_ = other.sourceUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetlessAbilityUnit Clone() {
      return new UseTargetlessAbilityUnit(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "source_unit" field.</summary>
    public const int SourceUnitFieldNumber = 2;
    private ulong sourceUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceUnit {
      get { return sourceUnit_; }
      set {
        sourceUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseTargetlessAbilityUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseTargetlessAbilityUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (SourceUnit != other.SourceUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (SourceUnit != 0UL) hash ^= SourceUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (SourceUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SourceUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (SourceUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseTargetlessAbilityUnit other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.SourceUnit != 0UL) {
        SourceUnit = other.SourceUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            SourceUnit = input.ReadUInt64();
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseTargetlessAbilitySquad : pb::IMessage<UseTargetlessAbilitySquad> {
    private static readonly pb::MessageParser<UseTargetlessAbilitySquad> _parser = new pb::MessageParser<UseTargetlessAbilitySquad>(() => new UseTargetlessAbilitySquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseTargetlessAbilitySquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetlessAbilitySquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetlessAbilitySquad(UseTargetlessAbilitySquad other) : this() {
      abilityId_ = other.abilityId_;
      squad_ = other.squad_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseTargetlessAbilitySquad Clone() {
      return new UseTargetlessAbilitySquad(this);
    }

    /// <summary>Field number for the "ability_id" field.</summary>
    public const int AbilityIdFieldNumber = 1;
    private int abilityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AbilityId {
      get { return abilityId_; }
      set {
        abilityId_ = value;
      }
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 2;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseTargetlessAbilitySquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseTargetlessAbilitySquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AbilityId != other.AbilityId) return false;
      if (Squad != other.Squad) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AbilityId != 0) hash ^= AbilityId.GetHashCode();
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AbilityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AbilityId);
      }
      if (Squad != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Squad);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AbilityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbilityId);
      }
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseTargetlessAbilitySquad other) {
      if (other == null) {
        return;
      }
      if (other.AbilityId != 0) {
        AbilityId = other.AbilityId;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AbilityId = input.ReadInt32();
            break;
          }
          case 16: {
            Squad = input.ReadUInt64();
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartMoveUnit : pb::IMessage<SmartMoveUnit> {
    private static readonly pb::MessageParser<SmartMoveUnit> _parser = new pb::MessageParser<SmartMoveUnit>(() => new SmartMoveUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartMoveUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartMoveUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartMoveUnit(SmartMoveUnit other) : this() {
      unitTag_ = other.unitTag_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartMoveUnit Clone() {
      return new SmartMoveUnit(this);
    }

    /// <summary>Field number for the "unit_tag" field.</summary>
    public const int UnitTagFieldNumber = 1;
    private ulong unitTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnitTag {
      get { return unitTag_; }
      set {
        unitTag_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartMoveUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartMoveUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitTag != other.UnitTag) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitTag != 0UL) hash ^= UnitTag.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitTag != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UnitTag);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitTag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartMoveUnit other) {
      if (other == null) {
        return;
      }
      if (other.UnitTag != 0UL) {
        UnitTag = other.UnitTag;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitTag = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartMoveSquad : pb::IMessage<SmartMoveSquad> {
    private static readonly pb::MessageParser<SmartMoveSquad> _parser = new pb::MessageParser<SmartMoveSquad>(() => new SmartMoveSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartMoveSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartMoveSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartMoveSquad(SmartMoveSquad other) : this() {
      squad_ = other.squad_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartMoveSquad Clone() {
      return new SmartMoveSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartMoveSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartMoveSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squad != other.Squad) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squad != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Squad);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartMoveSquad other) {
      if (other == null) {
        return;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Squad = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartAttackMoveUnit : pb::IMessage<SmartAttackMoveUnit> {
    private static readonly pb::MessageParser<SmartAttackMoveUnit> _parser = new pb::MessageParser<SmartAttackMoveUnit>(() => new SmartAttackMoveUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartAttackMoveUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackMoveUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackMoveUnit(SmartAttackMoveUnit other) : this() {
      unitTag_ = other.unitTag_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackMoveUnit Clone() {
      return new SmartAttackMoveUnit(this);
    }

    /// <summary>Field number for the "unit_tag" field.</summary>
    public const int UnitTagFieldNumber = 1;
    private ulong unitTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UnitTag {
      get { return unitTag_; }
      set {
        unitTag_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartAttackMoveUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartAttackMoveUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UnitTag != other.UnitTag) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UnitTag != 0UL) hash ^= UnitTag.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UnitTag != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(UnitTag);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UnitTag != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnitTag);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartAttackMoveUnit other) {
      if (other == null) {
        return;
      }
      if (other.UnitTag != 0UL) {
        UnitTag = other.UnitTag;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UnitTag = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartAttackMoveSquad : pb::IMessage<SmartAttackMoveSquad> {
    private static readonly pb::MessageParser<SmartAttackMoveSquad> _parser = new pb::MessageParser<SmartAttackMoveSquad>(() => new SmartAttackMoveSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartAttackMoveSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackMoveSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackMoveSquad(SmartAttackMoveSquad other) : this() {
      squad_ = other.squad_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackMoveSquad Clone() {
      return new SmartAttackMoveSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartAttackMoveSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartAttackMoveSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squad != other.Squad) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squad != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Squad);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartAttackMoveSquad other) {
      if (other == null) {
        return;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Squad = input.ReadUInt64();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartAttackUnit : pb::IMessage<SmartAttackUnit> {
    private static readonly pb::MessageParser<SmartAttackUnit> _parser = new pb::MessageParser<SmartAttackUnit>(() => new SmartAttackUnit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartAttackUnit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackUnit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackUnit(SmartAttackUnit other) : this() {
      sourceUnit_ = other.sourceUnit_;
      targetUnit_ = other.targetUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackUnit Clone() {
      return new SmartAttackUnit(this);
    }

    /// <summary>Field number for the "source_unit" field.</summary>
    public const int SourceUnitFieldNumber = 1;
    private ulong sourceUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SourceUnit {
      get { return sourceUnit_; }
      set {
        sourceUnit_ = value;
      }
    }

    /// <summary>Field number for the "target_unit" field.</summary>
    public const int TargetUnitFieldNumber = 2;
    private ulong targetUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnit {
      get { return targetUnit_; }
      set {
        targetUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartAttackUnit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartAttackUnit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceUnit != other.SourceUnit) return false;
      if (TargetUnit != other.TargetUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceUnit != 0UL) hash ^= SourceUnit.GetHashCode();
      if (TargetUnit != 0UL) hash ^= TargetUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceUnit != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SourceUnit);
      }
      if (TargetUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SourceUnit);
      }
      if (TargetUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartAttackUnit other) {
      if (other == null) {
        return;
      }
      if (other.SourceUnit != 0UL) {
        SourceUnit = other.SourceUnit;
      }
      if (other.TargetUnit != 0UL) {
        TargetUnit = other.TargetUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceUnit = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetUnit = input.ReadUInt64();
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SmartAttackSquad : pb::IMessage<SmartAttackSquad> {
    private static readonly pb::MessageParser<SmartAttackSquad> _parser = new pb::MessageParser<SmartAttackSquad>(() => new SmartAttackSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SmartAttackSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackSquad(SmartAttackSquad other) : this() {
      squad_ = other.squad_;
      targetUnit_ = other.targetUnit_;
      queue_ = other.queue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SmartAttackSquad Clone() {
      return new SmartAttackSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private ulong squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    /// <summary>Field number for the "target_unit" field.</summary>
    public const int TargetUnitFieldNumber = 2;
    private ulong targetUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetUnit {
      get { return targetUnit_; }
      set {
        targetUnit_ = value;
      }
    }

    /// <summary>Field number for the "queue" field.</summary>
    public const int QueueFieldNumber = 3;
    private bool queue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Queue {
      get { return queue_; }
      set {
        queue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SmartAttackSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SmartAttackSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Squad != other.Squad) return false;
      if (TargetUnit != other.TargetUnit) return false;
      if (Queue != other.Queue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Squad != 0UL) hash ^= Squad.GetHashCode();
      if (TargetUnit != 0UL) hash ^= TargetUnit.GetHashCode();
      if (Queue != false) hash ^= Queue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Squad != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Squad);
      }
      if (TargetUnit != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TargetUnit);
      }
      if (Queue != false) {
        output.WriteRawTag(24);
        output.WriteBool(Queue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Squad != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Squad);
      }
      if (TargetUnit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetUnit);
      }
      if (Queue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SmartAttackSquad other) {
      if (other == null) {
        return;
      }
      if (other.Squad != 0UL) {
        Squad = other.Squad;
      }
      if (other.TargetUnit != 0UL) {
        TargetUnit = other.TargetUnit;
      }
      if (other.Queue != false) {
        Queue = other.Queue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Squad = input.ReadUInt64();
            break;
          }
          case 16: {
            TargetUnit = input.ReadUInt64();
            break;
          }
          case 24: {
            Queue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SquadRequest : pb::IMessage<SquadRequest> {
    private static readonly pb::MessageParser<SquadRequest> _parser = new pb::MessageParser<SquadRequest>(() => new SquadRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SquadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SquadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SquadRequest(SquadRequest other) : this() {
      CreateSquad = other.createSquad_ != null ? other.CreateSquad.Clone() : null;
      RemoveSquad = other.removeSquad_ != null ? other.RemoveSquad.Clone() : null;
      AddUnits = other.addUnits_ != null ? other.AddUnits.Clone() : null;
      RemoveUnits = other.removeUnits_ != null ? other.RemoveUnits.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SquadRequest Clone() {
      return new SquadRequest(this);
    }

    /// <summary>Field number for the "create_squad" field.</summary>
    public const int CreateSquadFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.CreateSquad createSquad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.CreateSquad CreateSquad {
      get { return createSquad_; }
      set {
        createSquad_ = value;
      }
    }

    /// <summary>Field number for the "remove_squad" field.</summary>
    public const int RemoveSquadFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.RemoveSquad removeSquad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.RemoveSquad RemoveSquad {
      get { return removeSquad_; }
      set {
        removeSquad_ = value;
      }
    }

    /// <summary>Field number for the "add_units" field.</summary>
    public const int AddUnitsFieldNumber = 3;
    private global::NydusNetwork.API.Protocol.AddUnits addUnits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.AddUnits AddUnits {
      get { return addUnits_; }
      set {
        addUnits_ = value;
      }
    }

    /// <summary>Field number for the "remove_units" field.</summary>
    public const int RemoveUnitsFieldNumber = 4;
    private global::NydusNetwork.API.Protocol.RemoveUnits removeUnits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.RemoveUnits RemoveUnits {
      get { return removeUnits_; }
      set {
        removeUnits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SquadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SquadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CreateSquad, other.CreateSquad)) return false;
      if (!object.Equals(RemoveSquad, other.RemoveSquad)) return false;
      if (!object.Equals(AddUnits, other.AddUnits)) return false;
      if (!object.Equals(RemoveUnits, other.RemoveUnits)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (createSquad_ != null) hash ^= CreateSquad.GetHashCode();
      if (removeSquad_ != null) hash ^= RemoveSquad.GetHashCode();
      if (addUnits_ != null) hash ^= AddUnits.GetHashCode();
      if (removeUnits_ != null) hash ^= RemoveUnits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (createSquad_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CreateSquad);
      }
      if (removeSquad_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RemoveSquad);
      }
      if (addUnits_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(AddUnits);
      }
      if (removeUnits_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RemoveUnits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (createSquad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateSquad);
      }
      if (removeSquad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveSquad);
      }
      if (addUnits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddUnits);
      }
      if (removeUnits_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveUnits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SquadRequest other) {
      if (other == null) {
        return;
      }
      if (other.createSquad_ != null) {
        if (createSquad_ == null) {
          createSquad_ = new global::NydusNetwork.API.Protocol.CreateSquad();
        }
        CreateSquad.MergeFrom(other.CreateSquad);
      }
      if (other.removeSquad_ != null) {
        if (removeSquad_ == null) {
          removeSquad_ = new global::NydusNetwork.API.Protocol.RemoveSquad();
        }
        RemoveSquad.MergeFrom(other.RemoveSquad);
      }
      if (other.addUnits_ != null) {
        if (addUnits_ == null) {
          addUnits_ = new global::NydusNetwork.API.Protocol.AddUnits();
        }
        AddUnits.MergeFrom(other.AddUnits);
      }
      if (other.removeUnits_ != null) {
        if (removeUnits_ == null) {
          removeUnits_ = new global::NydusNetwork.API.Protocol.RemoveUnits();
        }
        RemoveUnits.MergeFrom(other.RemoveUnits);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (createSquad_ == null) {
              createSquad_ = new global::NydusNetwork.API.Protocol.CreateSquad();
            }
            input.ReadMessage(createSquad_);
            break;
          }
          case 18: {
            if (removeSquad_ == null) {
              removeSquad_ = new global::NydusNetwork.API.Protocol.RemoveSquad();
            }
            input.ReadMessage(removeSquad_);
            break;
          }
          case 26: {
            if (addUnits_ == null) {
              addUnits_ = new global::NydusNetwork.API.Protocol.AddUnits();
            }
            input.ReadMessage(addUnits_);
            break;
          }
          case 34: {
            if (removeUnits_ == null) {
              removeUnits_ = new global::NydusNetwork.API.Protocol.RemoveUnits();
            }
            input.ReadMessage(removeUnits_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateSquad : pb::IMessage<CreateSquad> {
    private static readonly pb::MessageParser<CreateSquad> _parser = new pb::MessageParser<CreateSquad>(() => new CreateSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSquad(CreateSquad other) : this() {
      Squad = other.squad_ != null ? other.Squad.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateSquad Clone() {
      return new CreateSquad(this);
    }

    /// <summary>Field number for the "squad" field.</summary>
    public const int SquadFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.SquadData squad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.SquadData Squad {
      get { return squad_; }
      set {
        squad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Squad, other.Squad)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (squad_ != null) hash ^= Squad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (squad_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Squad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (squad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Squad);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateSquad other) {
      if (other == null) {
        return;
      }
      if (other.squad_ != null) {
        if (squad_ == null) {
          squad_ = new global::NydusNetwork.API.Protocol.SquadData();
        }
        Squad.MergeFrom(other.Squad);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (squad_ == null) {
              squad_ = new global::NydusNetwork.API.Protocol.SquadData();
            }
            input.ReadMessage(squad_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveSquad : pb::IMessage<RemoveSquad> {
    private static readonly pb::MessageParser<RemoveSquad> _parser = new pb::MessageParser<RemoveSquad>(() => new RemoveSquad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveSquad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSquad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSquad(RemoveSquad other) : this() {
      squadId_ = other.squadId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveSquad Clone() {
      return new RemoveSquad(this);
    }

    /// <summary>Field number for the "squad_id" field.</summary>
    public const int SquadIdFieldNumber = 1;
    private ulong squadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SquadId {
      get { return squadId_; }
      set {
        squadId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveSquad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveSquad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SquadId != other.SquadId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SquadId != 0UL) hash ^= SquadId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SquadId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SquadId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SquadId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SquadId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveSquad other) {
      if (other == null) {
        return;
      }
      if (other.SquadId != 0UL) {
        SquadId = other.SquadId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SquadId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddUnits : pb::IMessage<AddUnits> {
    private static readonly pb::MessageParser<AddUnits> _parser = new pb::MessageParser<AddUnits>(() => new AddUnits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddUnits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUnits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUnits(AddUnits other) : this() {
      squadId_ = other.squadId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddUnits Clone() {
      return new AddUnits(this);
    }

    /// <summary>Field number for the "squad_id" field.</summary>
    public const int SquadIdFieldNumber = 1;
    private ulong squadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SquadId {
      get { return squadId_; }
      set {
        squadId_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_tags_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> tags_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddUnits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddUnits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SquadId != other.SquadId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SquadId != 0UL) hash ^= SquadId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SquadId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SquadId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SquadId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SquadId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddUnits other) {
      if (other == null) {
        return;
      }
      if (other.SquadId != 0UL) {
        SquadId = other.SquadId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SquadId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveUnits : pb::IMessage<RemoveUnits> {
    private static readonly pb::MessageParser<RemoveUnits> _parser = new pb::MessageParser<RemoveUnits>(() => new RemoveUnits());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveUnits> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveUnits() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveUnits(RemoveUnits other) : this() {
      squadId_ = other.squadId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveUnits Clone() {
      return new RemoveUnits(this);
    }

    /// <summary>Field number for the "squad_id" field.</summary>
    public const int SquadIdFieldNumber = 1;
    private ulong squadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SquadId {
      get { return squadId_; }
      set {
        squadId_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 2;
    private static readonly pb::FieldCodec<ulong> _repeated_tags_codec
        = pb::FieldCodec.ForUInt64(18);
    private readonly pbc::RepeatedField<ulong> tags_ = new pbc::RepeatedField<ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveUnits);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveUnits other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SquadId != other.SquadId) return false;
      if(!tags_.Equals(other.tags_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SquadId != 0UL) hash ^= SquadId.GetHashCode();
      hash ^= tags_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SquadId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SquadId);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SquadId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SquadId);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveUnits other) {
      if (other == null) {
        return;
      }
      if (other.SquadId != 0UL) {
        SquadId = other.SquadId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SquadId = input.ReadUInt64();
            break;
          }
          case 18:
          case 16: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RawRequest : pb::IMessage<RawRequest> {
    private static readonly pb::MessageParser<RawRequest> _parser = new pb::MessageParser<RawRequest>(() => new RawRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RawRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawRequest(RawRequest other) : this() {
      Request = other.request_ != null ? other.Request.Clone() : null;
      getResponse_ = other.getResponse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RawRequest Clone() {
      return new RawRequest(this);
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.Request request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Request Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "getResponse" field.</summary>
    public const int GetResponseFieldNumber = 2;
    private bool getResponse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GetResponse {
      get { return getResponse_; }
      set {
        getResponse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RawRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RawRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Request, other.Request)) return false;
      if (GetResponse != other.GetResponse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (request_ != null) hash ^= Request.GetHashCode();
      if (GetResponse != false) hash ^= GetResponse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (request_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Request);
      }
      if (GetResponse != false) {
        output.WriteRawTag(16);
        output.WriteBool(GetResponse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (GetResponse != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RawRequest other) {
      if (other == null) {
        return;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          request_ = new global::NydusNetwork.API.Protocol.Request();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.GetResponse != false) {
        GetResponse = other.GetResponse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (request_ == null) {
              request_ = new global::NydusNetwork.API.Protocol.Request();
            }
            input.ReadMessage(request_);
            break;
          }
          case 16: {
            GetResponse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notification : pb::IMessage<Notification> {
    private static readonly pb::MessageParser<Notification> _parser = new pb::MessageParser<Notification>(() => new Notification());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notification> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification(Notification other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notification Clone() {
      return new Notification(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::NydusNetwork.API.Protocol.NotificationType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.NotificationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notification);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notification other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notification other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::NydusNetwork.API.Protocol.NotificationType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbathurMap : pb::IMessage<AbathurMap> {
    private static readonly pb::MessageParser<AbathurMap> _parser = new pb::MessageParser<AbathurMap>(() => new AbathurMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbathurMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurMap(AbathurMap other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbathurMap Clone() {
      return new AbathurMap(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbathurMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbathurMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbathurMap other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ColonyData : pb::IMessage<ColonyData> {
    private static readonly pb::MessageParser<ColonyData> _parser = new pb::MessageParser<ColonyData>(() => new ColonyData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColonyData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyData(ColonyData other) : this() {
      colId_ = other.colId_;
      Point = other.point_ != null ? other.Point.Clone() : null;
      isStartingLocation_ = other.isStartingLocation_;
      minerals_ = other.minerals_.Clone();
      vespene_ = other.vespene_.Clone();
      structures_ = other.structures_.Clone();
      workers_ = other.workers_.Clone();
      desiredVespeneWorkers_ = other.desiredVespeneWorkers_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColonyData Clone() {
      return new ColonyData(this);
    }

    /// <summary>Field number for the "col_id" field.</summary>
    public const int ColIdFieldNumber = 1;
    private uint colId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColId {
      get { return colId_; }
      set {
        colId_ = value;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 2;
    private global::NydusNetwork.API.Protocol.Point2D point_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NydusNetwork.API.Protocol.Point2D Point {
      get { return point_; }
      set {
        point_ = value;
      }
    }

    /// <summary>Field number for the "is_starting_location" field.</summary>
    public const int IsStartingLocationFieldNumber = 3;
    private bool isStartingLocation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStartingLocation {
      get { return isStartingLocation_; }
      set {
        isStartingLocation_ = value;
      }
    }

    /// <summary>Field number for the "minerals" field.</summary>
    public const int MineralsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_minerals_codec
        = pb::FieldCodec.ForMessage(34, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> minerals_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> Minerals {
      get { return minerals_; }
    }

    /// <summary>Field number for the "vespene" field.</summary>
    public const int VespeneFieldNumber = 5;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_vespene_codec
        = pb::FieldCodec.ForMessage(42, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> vespene_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> Vespene {
      get { return vespene_; }
    }

    /// <summary>Field number for the "structures" field.</summary>
    public const int StructuresFieldNumber = 6;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_structures_codec
        = pb::FieldCodec.ForMessage(50, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> structures_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> Structures {
      get { return structures_; }
    }

    /// <summary>Field number for the "workers" field.</summary>
    public const int WorkersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_workers_codec
        = pb::FieldCodec.ForMessage(58, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> workers_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> Workers {
      get { return workers_; }
    }

    /// <summary>Field number for the "desired_vespene_workers" field.</summary>
    public const int DesiredVespeneWorkersFieldNumber = 8;
    private int desiredVespeneWorkers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DesiredVespeneWorkers {
      get { return desiredVespeneWorkers_; }
      set {
        desiredVespeneWorkers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColonyData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColonyData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ColId != other.ColId) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (IsStartingLocation != other.IsStartingLocation) return false;
      if(!minerals_.Equals(other.minerals_)) return false;
      if(!vespene_.Equals(other.vespene_)) return false;
      if(!structures_.Equals(other.structures_)) return false;
      if(!workers_.Equals(other.workers_)) return false;
      if (DesiredVespeneWorkers != other.DesiredVespeneWorkers) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ColId != 0) hash ^= ColId.GetHashCode();
      if (point_ != null) hash ^= Point.GetHashCode();
      if (IsStartingLocation != false) hash ^= IsStartingLocation.GetHashCode();
      hash ^= minerals_.GetHashCode();
      hash ^= vespene_.GetHashCode();
      hash ^= structures_.GetHashCode();
      hash ^= workers_.GetHashCode();
      if (DesiredVespeneWorkers != 0) hash ^= DesiredVespeneWorkers.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ColId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ColId);
      }
      if (point_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Point);
      }
      if (IsStartingLocation != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsStartingLocation);
      }
      minerals_.WriteTo(output, _repeated_minerals_codec);
      vespene_.WriteTo(output, _repeated_vespene_codec);
      structures_.WriteTo(output, _repeated_structures_codec);
      workers_.WriteTo(output, _repeated_workers_codec);
      if (DesiredVespeneWorkers != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DesiredVespeneWorkers);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ColId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColId);
      }
      if (point_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (IsStartingLocation != false) {
        size += 1 + 1;
      }
      size += minerals_.CalculateSize(_repeated_minerals_codec);
      size += vespene_.CalculateSize(_repeated_vespene_codec);
      size += structures_.CalculateSize(_repeated_structures_codec);
      size += workers_.CalculateSize(_repeated_workers_codec);
      if (DesiredVespeneWorkers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DesiredVespeneWorkers);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColonyData other) {
      if (other == null) {
        return;
      }
      if (other.ColId != 0) {
        ColId = other.ColId;
      }
      if (other.point_ != null) {
        if (point_ == null) {
          point_ = new global::NydusNetwork.API.Protocol.Point2D();
        }
        Point.MergeFrom(other.Point);
      }
      if (other.IsStartingLocation != false) {
        IsStartingLocation = other.IsStartingLocation;
      }
      minerals_.Add(other.minerals_);
      vespene_.Add(other.vespene_);
      structures_.Add(other.structures_);
      workers_.Add(other.workers_);
      if (other.DesiredVespeneWorkers != 0) {
        DesiredVespeneWorkers = other.DesiredVespeneWorkers;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ColId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (point_ == null) {
              point_ = new global::NydusNetwork.API.Protocol.Point2D();
            }
            input.ReadMessage(point_);
            break;
          }
          case 24: {
            IsStartingLocation = input.ReadBool();
            break;
          }
          case 34: {
            minerals_.AddEntriesFrom(input, _repeated_minerals_codec);
            break;
          }
          case 42: {
            vespene_.AddEntriesFrom(input, _repeated_vespene_codec);
            break;
          }
          case 50: {
            structures_.AddEntriesFrom(input, _repeated_structures_codec);
            break;
          }
          case 58: {
            workers_.AddEntriesFrom(input, _repeated_workers_codec);
            break;
          }
          case 64: {
            DesiredVespeneWorkers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SquadData : pb::IMessage<SquadData> {
    private static readonly pb::MessageParser<SquadData> _parser = new pb::MessageParser<SquadData>(() => new SquadData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SquadData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NydusNetwork.API.Protocol.AbathurReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SquadData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SquadData(SquadData other) : this() {
      squadId_ = other.squadId_;
      name_ = other.name_;
      units_ = other.units_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SquadData Clone() {
      return new SquadData(this);
    }

    /// <summary>Field number for the "squad_id" field.</summary>
    public const int SquadIdFieldNumber = 1;
    private ulong squadId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SquadId {
      get { return squadId_; }
      set {
        squadId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "units" field.</summary>
    public const int UnitsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::NydusNetwork.API.Protocol.Unit> _repeated_units_codec
        = pb::FieldCodec.ForMessage(26, global::NydusNetwork.API.Protocol.Unit.Parser);
    private readonly pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> units_ = new pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NydusNetwork.API.Protocol.Unit> Units {
      get { return units_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SquadData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SquadData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SquadId != other.SquadId) return false;
      if (Name != other.Name) return false;
      if(!units_.Equals(other.units_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SquadId != 0UL) hash ^= SquadId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= units_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SquadId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SquadId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      units_.WriteTo(output, _repeated_units_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SquadId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SquadId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += units_.CalculateSize(_repeated_units_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SquadData other) {
      if (other == null) {
        return;
      }
      if (other.SquadId != 0UL) {
        SquadId = other.SquadId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      units_.Add(other.units_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SquadId = input.ReadUInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            units_.AddEntriesFrom(input, _repeated_units_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
